#
# PySNMP MIB module A3COM-SDLC-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/A3COM-SDLC-R1-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:33:21 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
ifAdminStatus, ifOperStatus, ifIndex = mibBuilder.importSymbols("IF-MIB", "ifAdminStatus", "ifOperStatus", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, IpAddress, ObjectIdentity, TimeTicks, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, Counter64, Integer32, ModuleIdentity, iso, NotificationType, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "IpAddress", "ObjectIdentity", "TimeTicks", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "Counter64", "Integer32", "ModuleIdentity", "iso", "NotificationType", "MibIdentifier", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
sdlc = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25))
class MacAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sdlcPortGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25, 1))
sdlcLSGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25, 2))
sdlcMapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 25, 3))
sdlcPortAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1), )
if mibBuilder.loadTexts: sdlcPortAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminTable.setDescription('This table contains objects that can be changed to manage an SDLC port. Changing one of these parameters may take effect in the operating port immediately or may wait until the interface is restarted depending on the details of the implementation. Most of the objects in this read-write table have corresponding read-only objects in the sdlcPortOperTable that return the current operating value. The operating values may be different from these configured values if a configured parameter was changed after the interface was started.')
sdlcPortAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdlcPortAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminEntry.setDescription('A list of configured values for an SDLC port.')
sdlcPortAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortAdminName.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminName.setDescription('An octet string that defines the physical port to which this interface is assigned. It has implementation-specific significance. Its value shall be unique within the administered system. It must contain only ASCII printable characters. Should an implementation choose to accept a write operation for this object, it causes the logical port definition associated with the table instance to be moved to a different physical port. A write operation shall not take effect until the port is cycled inactive.')
sdlcPortAdminRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("negotiable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminRole.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminRole.setDescription('This object describes the role that the link station shall assume the next time a connection is established. Even though this is defined as a port object, it is a link station attribute in the sense that a role is per link station. However, it is not possible to vary link station roles on a particular port. For example, if an SDLC port is configured to primary, all link stations on that port must be primary.')
sdlcPortAdminType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2))).clone('leased')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminType.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminType.setDescription('This parameter defines whether the SDLC port is to connect to a leased or switched line. A write operation to this administrative value shall not take effect until the SDLC port has been cycled inactive.')
sdlcPortAdminTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multipoint", 2))).clone('pointToPoint')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminTopology.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminTopology.setDescription('This parameter defines whether the SDLC port is capable of operating in either a point-to-point or multipoint topology. sdlcPortAdminTopology == multipoint implies the port can also operate in a point-to-point topology. sdlcPortAdminTopology == pointToPoint does not imply the port can operate in a multipoint topology. A write operation to this administrative value shall not take effect until the SDLC port has been cycled inactive.')
sdlcPortAdminACTIVTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminACTIVTO.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminACTIVTO.setDescription('This parameter defines the period of time (in 1/100ths of a second) that the port will allow a switched line to remain inactive before disconnecting. A switched line is considered to be inactive if there are no I-Frames being transferred. A value of zero indicates no timeout. Depending on the implementation, a write operation to this administered value may not take effect until the port is cycled inactive. This object only has meaning for SDLC ports where sdlcPortAdminType == switched The object descriptor contains the name of an NCP configuration parameter, ACTIVTO. Please note that the value of this object represents 1/100ths of a second while the NCP ACTIVTO is represented in seconds.')
sdlcPortAdminPAUSE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 6), TimeTicks().clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminPAUSE.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminPAUSE.setDescription('This object defines the minimum elapsed time (in 1/100ths of a second) between any two traversals of the poll list for a primary SDLC port. Depending on the implementation, a write operation to this administered value may not take effect until the port is cycled inactive. The object descriptor contains the name of an NCP configuration parameter, PAUSE. Please note that the value of this object represents 1/100ths of a second while the NCP PAUSE is represented in 1/10ths of a second. This object only has meaning for SDLC ports where sdlcPortAdminRole == primary ')
sdlcPortAdminSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 1, 1, 7), TimeTicks().clone(2000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcPortAdminSlowPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortAdminSlowPollTimer.setDescription('This object describes the elapsed time (in 1/100ths of a second) between polls for failed secondary link station addresses. Depending on the implementation, a write operation to this administered value may not take effect until the port is cycled inactive. This object only has meaning for SDLC ports where sdlcPortAdminRole == primary and sdlcPortAdminTopology == multipoint ')
sdlcPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2), )
if mibBuilder.loadTexts: sdlcPortOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperTable.setDescription('This table contains current SDLC port parameters. Many of these objects have corresponding objects in the sdlcPortAdminTable.')
sdlcPortOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdlcPortOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperEntry.setDescription('Currently set parameters for a specific SDLC port.')
sdlcPortOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperName.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperName.setDescription('An octet string that describes the physical port to which this interface is currently attached. It has implementation-specific significance.')
sdlcPortOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperRole.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperRole.setDescription('This object describes the role that the link station has assumed on this connection. Even though this is defined as a port object, it is a link station attribute in the sense that a role is per link station. However, it is not possible to vary link station roles on a particular port. For example, if an SDLC port is configured to primary, all link stations on that port must be primary. The value of sdlcPortOperRole is undefined(3) whenever the link station role has not yet been established by the mode setting command.')
sdlcPortOperType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("leased", 1), ("switched", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperType.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperType.setDescription('This parameter defines whether the SDLC port is currently operating as though connected to a leased or switched line.')
sdlcPortOperTopology = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pointToPoint", 1), ("multipoint", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperTopology.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperTopology.setDescription('This parameter defines whether the SDLC port is mandatoryly operating in a point-to-point or multipoint topology.')
sdlcPortOperACTIVTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperACTIVTO.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperACTIVTO.setDescription('This parameter defines the period of time (in 100ths of a second) that the port will allow a switched line to remain inactive before disconnecting. A switched line is considered to be inactive if there are no I-Frames being transferred. The object descriptor contains the name of an NCP configuration parameter, ACTIVTO. Please note that the value of this object represents 1/100ths of a second while the NCP ACTIVTO is represented in seconds. A value of zero indicates no timeout.')
sdlcPortOperPAUSE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperPAUSE.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperPAUSE.setDescription('This object describes the current minimum elapsed time (in 1/100ths of a second) between any two traversals of the poll list for a primary SDLC port. The object descriptor contains the name of an NCP configuration parameter, PAUSE. Please note that the value of this object represents 1/100ths of a second while the NCP PAUSE is represented in 1/10ths of a second. This object only has meaning for SDLC ports where sdlcPortAdminRole == primary ')
sdlcPortOperSlowPollMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("servlim", 1), ("pollpause", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperSlowPollMethod.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperSlowPollMethod.setDescription('This object defines the exact method that is in effect for periodically polling failed secondary link station addresses. If sdlcPortOperSlowPollMethod == servlim, then sdlcPortOperSERVLIM defines the actual polling characteristics. If sdlcPortOperSlowPollMethod == pollpause, then sdlcPortOperSlowPollTimer defines the actual polling characteristics. If sdlcPortOperSlowPollMethod == other, then the polling characteristics are modeled in vendor-specific objects. This object only has meaning for SDLC ports where sdlcPortOperRole == primary and sdlcPortOperTopology == multipoint ')
sdlcPortOperSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 8), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperSlowPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperSlowPollTimer.setDescription('This object describes the elapsed time (in 1/100ths of a second) between polls for failed secondary link station addresses. This object only has meaning for SDLC ports where sdlcPortOperRole == primary and sdlcPortOperTopology == multipoint ')
sdlcPortOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperLastFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperLastFailTime.setDescription('This object describes the value of sysUpTime when this SDLC port last failed. If the port has not failed, then this value shall be zero.')
sdlcPortOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("undefined", 1), ("physical", 2))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortOperLastFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortOperLastFailCause.setDescription('This enumerated object describes the cause of the last failure of this SDLC port. If the port has not failed, then this object has a value of undefined(1).')
sdlcPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3), )
if mibBuilder.loadTexts: sdlcPortStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortStatsTable.setDescription('Each entry in this table contains statistics for a specific SDLC port.')
sdlcPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: sdlcPortStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortStatsEntry.setDescription('A list of statistics for an SDLC port.')
sdlcPortStatsPhysicalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortStatsPhysicalFailures.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortStatsPhysicalFailures.setDescription('This object reflects the total number of times this port has failed due to its physical media since port startup. At port startup time, this object must be initialized to zero.')
sdlcPortStatsInvalidAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortStatsInvalidAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortStatsInvalidAddresses.setDescription('This object reflects the total number of frames received by this port with invalid link station addresses.')
sdlcPortStatsDwarfFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 1, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcPortStatsDwarfFrames.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcPortStatsDwarfFrames.setDescription('This object reflects the total number of frames received by this port which were delivered intact by the physical layer but were too short to be legal. Ignoring the frame check sequence (FCS), a frame is considered to be too short if it is less than 2 bytes for sdlcLSOperMODULO of eight, or if it is less than 3 bytes for sdlcLSOperMODULO of onetwentyeight.')
sdlcLSAdminTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1), )
if mibBuilder.loadTexts: sdlcLSAdminTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminTable.setDescription('This table contains objects that can be changed to manage an SDLC link station. Changing one of these parameters may take effect in the operating link immediately or may wait until the link is restarted depending on the details of the implementation. Most of the objects in this read-write table have corresponding read-only objects in the sdlcLSOperTable that reflect the current operating value. The operating values may be different from these configured values if changed by XID negotiation or if a configured parameter was changed after the link was started.')
sdlcLSAdminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SDLC-R1-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: sdlcLSAdminEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminEntry.setDescription('A list of configured values for an SDLC link station.')
sdlcLSAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAddress.setDescription('This value is the poll address of the secondary link station for this SDLC link. It uniquely identifies the SDLC link station within a single SDLC port.')
sdlcLSAdminName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminName.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminName.setDescription('An octet string that defines the local name of the SDLC link station. This field may be sent in the XID3 control vector 0x0E, type 0xF7.')
sdlcLSAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminState.setDescription('This object controls the desired state of the SDLC station. The managed system shall attempt to keep the operational state, sdlcLSOperState, consistent with this value.')
sdlcLSAdminMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminMAXDATA.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminMAXDATA.setDescription('This object contains the maximum PDU size that the local link station thinks it can send to the adjacent link station before having received any XID from the ALS. After the maximum PDU size that the ALS can receive is known (via XID exchange) that value is reflected in sdlcLSOperMAXDATASend and takes precedence over this object. This value includes the Transmission Header (TH) and the Request Header (RH).')
sdlcLSAdminREPLYTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 5), TimeTicks().clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminREPLYTO.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminREPLYTO.setDescription('This object controls the reply timeout (in 1/100ths of a second) for an SDLC link station. If the link station does not receive a response to a poll or message before the specified time expires then the appropriate error recovery shall be initiated. The object descriptor contains the name of an NCP configuration parameter, REPLYTO. Please note that the value of this object represents 1/100ths of a second while the NCP REPLYTO is represented in 1/10ths of a second. Depending on the implementation, a write operation to this administered value may not change the operational value, sdlcLSOperREPLYTO, until the link station is cycled inactive. This object only has meaning for SDLC ports where sdlcPortAdminRole == primary ')
sdlcLSAdminMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminMAXIN.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminMAXIN.setDescription('This object controls the maximum number of unacknowledged I-frames which an SDLC link station may receive. This should range from 1 to (sdlcLSAdminMODULO - 1). This value is sent in the XID to the ALS.')
sdlcLSAdminMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminMAXOUT.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminMAXOUT.setDescription('This object controls the maximum number of consecutive unacknowledged I-frames which an SDLC link station shall send without an acknowledgement. This shall range from 1 to (sdlcLSAdminMODULO - 1). For link stations on switched SDLC lines, certain implementations may choose to override this administered value with the value received in the XID exchange. Depending on the implementation, a write operation to this administered value may not change the operational value, sdlcLSOperMAXOUT, until the link station is cycled inactive.')
sdlcLSAdminMODULO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("eight", 8), ("onetwentyeight", 128))).clone('eight')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminMODULO.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminMODULO.setDescription('This object controls the modulus for an SDLC link station. This modulus determines the size of the rotating acknowledgement window used the SDLC link station pair. An implementation can support only modulo 8, only modulo 128, or both.')
sdlcLSAdminRETRIESm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminRETRIESm.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminRETRIESm.setDescription('This object controls number of retries in a retry sequence for the local SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The number of times that the retry sequence is to be repeated is controlled by the object: sdlcLSAdminRETRIESn. The interval between retry sequences is controlled by the object: sdlcLSAdminRETRIESt. A value of zero indicates no retries. If the value of sdlcLSAdminRETRIESm is zero, then the values of sdlcLSAdminRETRIESt and sdlcLSAdminRETRIESn should also be zero.')
sdlcLSAdminRETRIESt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 10), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminRETRIESt.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminRETRIESt.setDescription('This object controls the interval (in 1/100ths of a second) between retry sequences for the local SDLC link station if multiple retry sequences are specified . A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The number of repeated retries sequences is controlled by the object: sdlcLSAdminRETRIESn. The retries per sequence is controlled by the object: sdlcLSAdminRETRIESm. The object descriptor contains the name of an NCP configuration parameter, RETRIESt. Please note that the value of this object represents 1/100ths of a second while the NCP RETRIESt is represented in seconds. Depending on the implementation, a write operation to this administered value may not change the operational value, sdlcLSOperRETRIESt, until the link station is cycled inactive.')
sdlcLSAdminRETRIESn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminRETRIESn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminRETRIESn.setDescription('This object controls the number of times that a retry sequence is repeated for the local SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The interval between retry sequences is controlled by the object: sdlcLSAdminRETRIESt. The retries per sequence is controlled by the object: sdlcLSAdminRETRIESm. Depending on the implementation, a write operation to this administered value may not change the operational value, sdlcLSOperRETRIESn, until the link station is cycled inactive.')
sdlcLSAdminRNRLIMIT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 12), TimeTicks().clone(18000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminRNRLIMIT.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminRNRLIMIT.setDescription('This object controls the length of time (in 1/100ths of a second) that an SDLC link station will allow its adjacent link station to remain in a busy (RNR) state before declaring it inoperative. A value of sdlcLSAdminRNRLIMIT == 0 means there is no limit. The object descriptor contains the name of an NCP configuration parameter, RNRLIMIT. Please note that the value of this object represents 1/100ths of a second while the NCP RNRLIMIT is represented in minutes. Depending on the implementation, a write operation to this administered value may not change the operational value, sdlcLSOperRNRLIMIT, until the link station is cycled inactive.')
sdlcLSAdminDATMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2))).clone('half')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminDATMODE.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminDATMODE.setDescription('This object controls whether communications mode with the adjacent link station is two-way-alternate (half) or two-way-simultaneous (full).')
sdlcLSAdminGPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sdlcLSAdminGPoll.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminGPoll.setDescription('This object describes the group poll address for this link station instance. If group poll is not in effect for this link station instance, the value for sdlcLSAdminGPoll should be zero. Depending on the implementation, a write operation to this administered value may not change the operational value, sdlcLSOperGPoll, until the link station is cycled inactive.')
sdlcLSAdminSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSAdminSimRim.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSAdminSimRim.setDescription('This object controls the support for transmission and receipt of SIM and RIM control frames for this link station. The value of this object controls the setting of the transmit-receive capability sent in the XID field.')
sdlcLSOperTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2), )
if mibBuilder.loadTexts: sdlcLSOperTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperTable.setDescription('This table contains current SDLC link parameters. Many of these objects have corresponding objects in the sdlcLSAdminTable.')
sdlcLSOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SDLC-R1-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: sdlcLSOperEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperEntry.setDescription('A list of status and control values for an SDLC link station.')
sdlcLSOperName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperName.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperName.setDescription('An octet string that defines the name of the remote SDLC link station. This field is received in the XID3 control vector 0x0E, type 0xF7.')
sdlcLSOperRole = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2), ("undefined", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRole.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperRole.setDescription('This object reflects the current role that the link station is assuming. The value of sdlcLSOperRole is undefined(3) whenever the link station role has not yet been established by the mode setting command.')
sdlcLSOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("discontacted", 1), ("contactPending", 2), ("contacted", 3), ("discontactPending", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperState.setDescription('This object describes the operational state of the SDLC link station. The managed system shall attempt to keep this value consistent with the administered state, sdlcLSAdminState')
sdlcLSOperMAXDATA = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMAXDATA.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperMAXDATA.setDescription('This object contains the actual maximum PDU size that the local link station can send to the adjacent link station. This object is established from the value received in the XID from the adjacent link station. If no XID is received, then this value is implementation dependent (for instance, it could be the value of sdlcLSAdminMAXDATA). This value includes the Transmission Header (TH) and the Request Header (RH).')
sdlcLSOperREPLYTO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperREPLYTO.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperREPLYTO.setDescription('This object reflects the current reply timeout (in 1/100ths of a second) for an SDLC link station. If the link station does not receive a response to a poll or message before the specified time expires then the appropriate error recovery shall be initiated. The object descriptor contains the name of an NCP configuration parameter, REPLYTO. Please note that the value of this object represents 1/100ths of a second while the NCP REPLYTO is represented in 1/10ths of a second. This object only has meaning for SDLC ports where sdlcPortOperRole == primary ')
sdlcLSOperMAXIN = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMAXIN.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperMAXIN.setDescription('This object reflects the current maximum number of unacknowledged I-frames which an SDLC link station may receive. This shall range from 1 to (sdlcLSOperMODULO - 1).')
sdlcLSOperMAXOUT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMAXOUT.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperMAXOUT.setDescription('This object controls the maximum number of consecutive unacknowledged I-frames which an SDLC link station shall send without an acknowledgement. This shall range from 1 to (sdlcLSAdminMODULO - 1). This value may controlled by the administered MAXOUT, sdlcLSAdminMAXOUT, or by the MAXIN value received during the XID exchange.')
sdlcLSOperMODULO = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 128))).clone(namedValues=NamedValues(("eight", 8), ("onetwentyeight", 128))).clone('eight')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperMODULO.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperMODULO.setDescription('This object reflects the current modulus for an SDLC link station. This modulus determines the size of rotating acknowledgement window used by the SDLC link station pair.')
sdlcLSOperRETRIESm = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRETRIESm.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperRETRIESm.setDescription('This object controls number of retries in a retry sequence for an SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The current number of times that the retry sequence is to be repeated is reflected by the object: sdlcLSOperRETRIESn. The current interval between retry sequences is reflected by the object: sdlcLSOperRETRIESt.')
sdlcLSOperRETRIESt = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRETRIESt.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperRETRIESt.setDescription('This object reflects the current interval (in 1/100ths of a second) between retry sequences for an SDLC link station if multiple retry sequences are specified. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The object descriptor contains the name of an NCP configuration parameter, RETRIESt. Please note that the value of this object represents 1/100ths of a second while the NCP RETRIESt is represented in seconds. The current number of repeated retries sequences is reflected by the object: sdlcLSOperRETRIESn. The current retries per sequence is reflected by the object: sdlcLSOperRETRIESm.')
sdlcLSOperRETRIESn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRETRIESn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperRETRIESn.setDescription('This object reflects the current number of times that a retry sequence is repeated for an SDLC link station. A retry sequence is a series of retransmitted frames ( data or control) for which no positive acknowledgement is received. The current interval between retry sequences is reflected by the object: sdlcLSOperRETRIESn. The current retries per sequence is reflected by the object: sdlcLSOperRETRIESm.')
sdlcLSOperRNRLIMIT = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperRNRLIMIT.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperRNRLIMIT.setDescription('This object reflects the current length of time (in 1/100ths of a second) that an SDLC link station will allow its adjacent link station to remain in a busy (RNR) state before declaring it inoperative. The object descriptor contains the name of an NCP configuration parameter, RNRLIMIT. Please note that the value of this object represents 1/100ths of a second while the NCP RNRLIMIT is represented in minutes. A value of sdlcLSOperRNRLIMIT == 0 means there is no limit.')
sdlcLSOperDATMODE = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperDATMODE.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperDATMODE.setDescription('This object reflects whether the current communications mode with the adjacent link station is two-way-alternate (half) or two-way-simultaneous (full).')
sdlcLSOperLastFailTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailTime.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperLastFailTime.setDescription('This object describes the value of sysUpTime when this SDLC link station last failed. If the link station has not failed, then this value shall be zero.')
sdlcLSOperLastFailCause = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("undefined", 1), ("rxFRMR", 2), ("txFRMR", 3), ("noResponse", 4), ("protocolErr", 5), ("noActivity", 6), ("rnrLimit", 7), ("retriesExpired", 8))).clone('undefined')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailCause.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperLastFailCause.setDescription('This enumerated object reflects the cause of the last failure of this SDLC link station. If the link station has not failed, then this object will have a value of undefined(1).')
sdlcLSOperLastFailCtrlIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailCtrlIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperLastFailCtrlIn.setDescription('This object reflects the last control octet or octets (depending on modulus) received by this SDLC link station at the time of the last failure. If the link station has not failed, then this value has no meaning.')
sdlcLSOperLastFailCtrlOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailCtrlOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperLastFailCtrlOut.setDescription('This object reflects the last control octet or octets (depending on modulus) sent by this SDLC link station at the time of the last failure. If the link station has not failed, then this value has no meaning.')
sdlcLSOperLastFailFRMRInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 18), OctetString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailFRMRInfo.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperLastFailFRMRInfo.setDescription('This object reflects the information field of the FRMR frame if the last failure for this SDLC link station was as a result of an invalid frame. Otherwise, this field has no meaning.')
sdlcLSOperLastFailREPLYTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperLastFailREPLYTOs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperLastFailREPLYTOs.setDescription('This object reflects the number of times that the REPLYTO timer had expired for an SDLC link station at the time of the last failure. If the link station has not failed, then this value has no meaning.')
sdlcLSOperGPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperGPoll.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperGPoll.setDescription('This object describes the group poll address in effect for this link station instance.')
sdlcLSOperSimRim = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2))).clone('no')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSOperSimRim.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSOperSimRim.setDescription('This object reflects the support for transmission and receipt of SIM and RIM control frames for the adjacent link station. The value of this object is set from the XID field received from the adjacent link station.')
sdlcLSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3), )
if mibBuilder.loadTexts: sdlcLSStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsTable.setDescription('Each entry in this table contains statistics for a specific SDLC link station.')
sdlcLSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "A3COM-SDLC-R1-MIB", "sdlcLSAddress"))
if mibBuilder.loadTexts: sdlcLSStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsEntry.setDescription('A list of statistics for an SDLC link station.')
sdlcLSStatsBLUsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsBLUsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsBLUsIn.setDescription('This object reflects the total basic link units (BLUs; frames) received from an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsBLUsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsBLUsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsBLUsOut.setDescription('This object reflects the total basic link units (BLUs; frames), transmitted to an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsOctetsIn.setDescription('This object reflects the total octets received from an adjacent SDLC link station since link station startup. This object covers the address, control, and information field of I-Frames only. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsOctetsOut.setDescription('This object reflects the total octets transmitted to an adjacent SDLC link station since link station startup. This object covers the address, control, and information field of I-Frames only. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsPollsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsPollsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsPollsOut.setDescription('This object reflects the total polls sent to an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsPollRspsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsPollRspsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsPollRspsOut.setDescription('This object reflects the total number of poll responses sent to the adjacent SDLC link station since link station startup. This value includes I-frames that are sent in response to a poll. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsLocalBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsLocalBusies.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsLocalBusies.setDescription('This object reflects the total number of times that the local SDLC link station has entered a busy state (RNR) since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsRemoteBusies = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRemoteBusies.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsRemoteBusies.setDescription('This object reflects the total number of times that an adjacent ( remote) SDLC link station has entered a busy state (RNR) since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsIFramesIn.setDescription('This object reflects the total I-frames received from an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsIFramesOut.setDescription('This object reflects the total I-frames transmitted to an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsRetransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsRetransmits.setDescription('This object reflects the total number of information frames retransmitted to a remote link station because the N(r) received from that link station indicated that one or more information frames sent to that station were lost. This event causes the first missing information frame of a window and all subsequent information frames to be retransmitted. At link station startup time, this object must be initialized to zero. Management: If the value of sdlcLSStatsRetransmits grows over time, then the quality of the serial line is in question. You might want to look at decreasing the value for sdlcLSAdminMAXDATA to compensate for the lower quality line.')
sdlcLSStatsIOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsIOctetsIn.setDescription('This object reflects the octets received in I-frames from an adjacent SDLC link station since link station startup. This object covers valid, retried, and out-of-order I-Frames. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsIOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsIOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsIOctetsOut.setDescription('This object reflects the octets transmitted in I-frames to an adjacent SDLC link station since link station startup. This object covers valid, retried, and out-of-order I-Frames. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsUIFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsUIFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsUIFramesIn.setDescription('This object reflects the total UI-frames received from an adjacent SDLC link station since link station startup.')
sdlcLSStatsUIFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsUIFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsUIFramesOut.setDescription('This object reflects the total UI-frames transmitted to an adjacent SDLC link station since link station startup.')
sdlcLSStatsXIDsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsXIDsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsXIDsIn.setDescription('This object reflects the total XID frames received from an adjacent SDLC link station since link station startup.')
sdlcLSStatsXIDsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsXIDsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsXIDsOut.setDescription('This object reflects the total XID frames transmitted to an adjacent SDLC link station since link station startup.')
sdlcLSStatsTESTsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsTESTsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsTESTsIn.setDescription('This object reflects the total TEST frames, commands or responses, received from an adjacent SDLC link station since link station startup.')
sdlcLSStatsTESTsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsTESTsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsTESTsOut.setDescription('This object reflects the total TEST frames, commands or responses, transmitted to an adjacent SDLC link station since link station startup.')
sdlcLSStatsREJsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsREJsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsREJsIn.setDescription('This object reflects the total REJ frames received from an adjacent SDLC link station since link station startup.')
sdlcLSStatsREJsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsREJsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsREJsOut.setDescription('This object reflects the total REJ frames transmitted to an adjacent SDLC link station since link station startup.')
sdlcLSStatsFRMRsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsFRMRsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsFRMRsIn.setDescription('This object reflects the total frame reject (FRMR) frames received from an adjacent SDLC link station since link station startup.')
sdlcLSStatsFRMRsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsFRMRsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsFRMRsOut.setDescription('This object reflects the total frame reject (FRMR) frames transmitted to an adjacent SDLC link station since link station startup.')
sdlcLSStatsSIMsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsSIMsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsSIMsIn.setDescription('This object reflects the total set initialization mode (SIM) frames received from an adjacent SDLC link station since link station startup.')
sdlcLSStatsSIMsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsSIMsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsSIMsOut.setDescription('This object reflects the total set initialization mode (SIM) frames transmitted to an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsRIMsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRIMsIn.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsRIMsIn.setDescription('This object reflects the total request initialization mode (RIM) frames received from an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsRIMsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRIMsOut.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsRIMsOut.setDescription('This object reflects the total request initialization mode (RIM) frames transmitted to an adjacent SDLC link station since link station startup. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsProtocolErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsProtocolErrs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsProtocolErrs.setDescription('This object reflects the total occurrences, since link station startup, where this SDLC link station has inactivated the link as a result of receiving a frame from its adjacent link station which was in violation of the protocol. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsActivityTOs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsActivityTOs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsActivityTOs.setDescription('This object reflects the total occurrences, since startup, where this SDLC link station has inactivated the link as a result of no activity on the link. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsRNRLIMITs = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRNRLIMITs.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsRNRLIMITs.setDescription('This object reflects the total occurrences, since startup, where this SDLC link station has inactivated the link as a result of its RNRLIMIT timer expiring. At link station startup time, this object must be initialized to zero.')
sdlcLSStatsRetriesExps = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 2, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcLSStatsRetriesExps.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcLSStatsRetriesExps.setDescription('This object reflects the total occurrences, since startup, where this SDLC link station has inactivated the link as a result of a retry sequence being exhausted. At link station startup time, this object must be initialized to zero.')
sdlcMapTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1), )
if mibBuilder.loadTexts: sdlcMapTable.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapTable.setDescription('This table contains objects that indicate how SDLC poll addresses are mapped to LLC2 MAC/SAP addresses within the router. The mapping indicates whether the SDLC device is locally or remotely attached. This table is proprietary to 3Com Inc. and is not part of the standard SDLC MIB.')
pysmiFakeCol1000 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1) + (1000, ), Integer32())
sdlcMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1), ).setIndexNames((0, "A3COM-SDLC-R1-MIB", "pysmiFakeCol1000"))
if mibBuilder.loadTexts: sdlcMapEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapEntry.setDescription('A list of configured values for mappings between SDLC and LLC2 links.')
sdlcMapPollAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapPollAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapPollAddress.setDescription('This value is the poll address of the link station. It uniquely identifies the SDLC link station to which frames are to be delivered after traversing the network.')
sdlcMapLocalMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapLocalMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapLocalMacAddress.setDescription("The local MAC address with which this control unit is associated. This address is taken from the 'CULocalMac' UI configuration parameter.")
sdlcMapLocalSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapLocalSap.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapLocalSap.setDescription("The local Service Access Point with which this control unit is associated. This SAP is taken from the 'CULocalSap' UI configuration parameter.")
sdlcMapRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapRemoteMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapRemoteMacAddress.setDescription("The remote MAC address with which this control unit is associated. This address is taken from the 'CURemoteMac' UI configuration parameter.")
sdlcMapRemoteSap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapRemoteSap.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapRemoteSap.setDescription("The remote Service Access Point with which this control unit is associated. This SAP is taken from the 'CURemoteSap' UI configuration parameter.")
sdlcMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapName.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapName.setDescription('An octet string that indicates the name assigned to the control unit associated with this poll address.')
sdlcMapPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapPortState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapPortState.setDescription('This object reflects the state of the port to which this control unit is attached.')
sdlcMapLSState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 25, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sdlcMapLSState.setStatus('mandatory')
if mibBuilder.loadTexts: sdlcMapLSState.setDescription('This object reflects the state of the link station with which this control unit is associated.')
sdlcPortStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 25) + (0,1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifAdminStatus"), ("IF-MIB", "ifOperStatus"), ("A3COM-SDLC-R1-MIB", "sdlcPortOperLastFailTime"), ("A3COM-SDLC-R1-MIB", "sdlcPortOperLastFailCause"))
if mibBuilder.loadTexts: sdlcPortStatusChange.setDescription('This trap indicates that the state of an SDLC port has transitioned to active or inactive.')
sdlcLSStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 43, 2, 25) + (0,2)).setObjects(("IF-MIB", "ifIndex"), ("A3COM-SDLC-R1-MIB", "sdlcLSAddress"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperState"), ("A3COM-SDLC-R1-MIB", "sdlcLSAdminState"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailTime"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailCause"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailFRMRInfo"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailCtrlIn"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailCtrlOut"), ("A3COM-SDLC-R1-MIB", "sdlcLSOperLastFailREPLYTOs"))
if mibBuilder.loadTexts: sdlcLSStatusChange.setDescription('This trap indicates that the state of an SDLC link station has transitioned to contacted or discontacted.')
mibBuilder.exportSymbols("A3COM-SDLC-R1-MIB", sdlcLSStatsSIMsOut=sdlcLSStatsSIMsOut, sdlcPortGroup=sdlcPortGroup, sdlcPortOperTable=sdlcPortOperTable, sdlcMapEntry=sdlcMapEntry, sdlcLSStatsTESTsIn=sdlcLSStatsTESTsIn, sdlcPortOperName=sdlcPortOperName, sdlcLSOperEntry=sdlcLSOperEntry, sdlcPortOperPAUSE=sdlcPortOperPAUSE, sdlcPortAdminName=sdlcPortAdminName, sdlcLSOperMAXIN=sdlcLSOperMAXIN, sdlcLSStatusChange=sdlcLSStatusChange, sdlcMapGroup=sdlcMapGroup, sdlcLSGroup=sdlcLSGroup, sdlcLSStatsIOctetsIn=sdlcLSStatsIOctetsIn, sdlcPortStatsTable=sdlcPortStatsTable, sdlcLSAdminMAXOUT=sdlcLSAdminMAXOUT, sdlcPortOperSlowPollMethod=sdlcPortOperSlowPollMethod, sdlcLSOperName=sdlcLSOperName, sdlcLSStatsFRMRsIn=sdlcLSStatsFRMRsIn, sdlcLSAddress=sdlcLSAddress, sdlcMapName=sdlcMapName, sdlcLSAdminRETRIESm=sdlcLSAdminRETRIESm, sdlcLSStatsXIDsIn=sdlcLSStatsXIDsIn, brouterMIB=brouterMIB, sdlcLSOperRNRLIMIT=sdlcLSOperRNRLIMIT, sdlcLSAdminRETRIESn=sdlcLSAdminRETRIESn, sdlcPortOperACTIVTO=sdlcPortOperACTIVTO, sdlcLSOperRETRIESm=sdlcLSOperRETRIESm, sdlcPortOperType=sdlcPortOperType, sdlcLSOperRETRIESt=sdlcLSOperRETRIESt, sdlcMapRemoteMacAddress=sdlcMapRemoteMacAddress, sdlcMapRemoteSap=sdlcMapRemoteSap, sdlcLSOperRETRIESn=sdlcLSOperRETRIESn, sdlcMapPortState=sdlcMapPortState, sdlcLSAdminMAXDATA=sdlcLSAdminMAXDATA, sdlcLSOperLastFailREPLYTOs=sdlcLSOperLastFailREPLYTOs, sdlcLSStatsREJsIn=sdlcLSStatsREJsIn, sdlcLSOperLastFailFRMRInfo=sdlcLSOperLastFailFRMRInfo, sdlcLSStatsSIMsIn=sdlcLSStatsSIMsIn, sdlcPortAdminRole=sdlcPortAdminRole, sdlcLSStatsPollsOut=sdlcLSStatsPollsOut, sdlcPortAdminTable=sdlcPortAdminTable, sdlcLSStatsIOctetsOut=sdlcLSStatsIOctetsOut, sdlcPortOperSlowPollTimer=sdlcPortOperSlowPollTimer, sdlcPortAdminType=sdlcPortAdminType, sdlcLSStatsActivityTOs=sdlcLSStatsActivityTOs, sdlcLSAdminEntry=sdlcLSAdminEntry, sdlcLSAdminDATMODE=sdlcLSAdminDATMODE, sdlcMapPollAddress=sdlcMapPollAddress, sdlcPortAdminTopology=sdlcPortAdminTopology, sdlcPortStatusChange=sdlcPortStatusChange, sdlcMapLSState=sdlcMapLSState, sdlcLSStatsRemoteBusies=sdlcLSStatsRemoteBusies, sdlcLSStatsRNRLIMITs=sdlcLSStatsRNRLIMITs, sdlcLSAdminSimRim=sdlcLSAdminSimRim, sdlcPortAdminSlowPollTimer=sdlcPortAdminSlowPollTimer, sdlcLSStatsREJsOut=sdlcLSStatsREJsOut, sdlcLSStatsTESTsOut=sdlcLSStatsTESTsOut, sdlcLSOperLastFailTime=sdlcLSOperLastFailTime, MacAddress=MacAddress, sdlcLSAdminRETRIESt=sdlcLSAdminRETRIESt, sdlcLSAdminREPLYTO=sdlcLSAdminREPLYTO, sdlcLSStatsRetransmits=sdlcLSStatsRetransmits, sdlcMapLocalMacAddress=sdlcMapLocalMacAddress, sdlcLSOperMAXOUT=sdlcLSOperMAXOUT, sdlcPortOperLastFailTime=sdlcPortOperLastFailTime, sdlcLSOperLastFailCtrlIn=sdlcLSOperLastFailCtrlIn, sdlcLSStatsEntry=sdlcLSStatsEntry, sdlcLSStatsXIDsOut=sdlcLSStatsXIDsOut, sdlcLSStatsUIFramesIn=sdlcLSStatsUIFramesIn, sdlcLSStatsOctetsIn=sdlcLSStatsOctetsIn, sdlcLSAdminState=sdlcLSAdminState, sdlcPortOperEntry=sdlcPortOperEntry, sdlcLSOperSimRim=sdlcLSOperSimRim, sdlcLSStatsOctetsOut=sdlcLSStatsOctetsOut, sdlcLSOperMAXDATA=sdlcLSOperMAXDATA, sdlcLSStatsRIMsIn=sdlcLSStatsRIMsIn, sdlcPortOperTopology=sdlcPortOperTopology, sdlcLSStatsIFramesIn=sdlcLSStatsIFramesIn, sdlcLSStatsUIFramesOut=sdlcLSStatsUIFramesOut, sdlcLSStatsRetriesExps=sdlcLSStatsRetriesExps, sdlcPortStatsInvalidAddresses=sdlcPortStatsInvalidAddresses, sdlcLSStatsBLUsIn=sdlcLSStatsBLUsIn, sdlcPortOperLastFailCause=sdlcPortOperLastFailCause, sdlcPortStatsPhysicalFailures=sdlcPortStatsPhysicalFailures, sdlcLSAdminRNRLIMIT=sdlcLSAdminRNRLIMIT, sdlcLSAdminName=sdlcLSAdminName, sdlcLSOperTable=sdlcLSOperTable, sdlcLSOperREPLYTO=sdlcLSOperREPLYTO, sdlcLSOperMODULO=sdlcLSOperMODULO, sdlcLSAdminGPoll=sdlcLSAdminGPoll, a3com=a3com, sdlc=sdlc, sdlcLSOperLastFailCtrlOut=sdlcLSOperLastFailCtrlOut, sdlcLSStatsLocalBusies=sdlcLSStatsLocalBusies, sdlcLSStatsBLUsOut=sdlcLSStatsBLUsOut, sdlcMapLocalSap=sdlcMapLocalSap, sdlcLSAdminMAXIN=sdlcLSAdminMAXIN, sdlcLSAdminMODULO=sdlcLSAdminMODULO, sdlcLSStatsTable=sdlcLSStatsTable, sdlcLSStatsIFramesOut=sdlcLSStatsIFramesOut, sdlcPortStatsDwarfFrames=sdlcPortStatsDwarfFrames, sdlcPortAdminACTIVTO=sdlcPortAdminACTIVTO, sdlcLSOperGPoll=sdlcLSOperGPoll, sdlcLSStatsFRMRsOut=sdlcLSStatsFRMRsOut, sdlcPortOperRole=sdlcPortOperRole, sdlcPortAdminEntry=sdlcPortAdminEntry, sdlcLSOperRole=sdlcLSOperRole, sdlcPortAdminPAUSE=sdlcPortAdminPAUSE, sdlcLSOperLastFailCause=sdlcLSOperLastFailCause, sdlcLSStatsPollRspsOut=sdlcLSStatsPollRspsOut, sdlcPortStatsEntry=sdlcPortStatsEntry, pysmiFakeCol1000=pysmiFakeCol1000, sdlcLSStatsProtocolErrs=sdlcLSStatsProtocolErrs, sdlcLSOperState=sdlcLSOperState, sdlcMapTable=sdlcMapTable, sdlcLSAdminTable=sdlcLSAdminTable, sdlcLSOperDATMODE=sdlcLSOperDATMODE, sdlcLSStatsRIMsOut=sdlcLSStatsRIMsOut)
