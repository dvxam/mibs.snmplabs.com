#
# PySNMP MIB module A3COM-DVMRP-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/A3COM-DVMRP-R1-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:32:19 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Counter32, Gauge32, ModuleIdentity, Counter64, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, Bits, Integer32, iso, NotificationType, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Counter32", "Gauge32", "ModuleIdentity", "Counter64", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "Bits", "Integer32", "iso", "NotificationType", "ObjectIdentity", "TimeTicks")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
a3ComDVMRP = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 28))
a3ComDvmrpSConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 28, 1))
a3ComDvmrpCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 28, 2))
a3ComDvmrpData = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 28, 3))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3ComDvmrpCacheTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 86400)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpCacheTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpCacheTime.setDescription('This object specifies the time in seconds a (source, group) entry is kept in the forwarding table. The entry can be kept within 5 minutes to 1 day.')
a3ComDvmrpPrune = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpPrune.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPrune.setDescription('If this object is set to enabled(1), then prune is on when running multicast routing with DVMRP protocol. If is is set to disabled(2), then prune is turned off.')
a3ComDvmrpUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 28, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5400)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpUpdateTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpUpdateTime.setDescription('This object specifies the time interval in seconds that Route Report containing complete routing table is sent. It also derives Route Expiration time which is set to three times value of this object, Garbage Collection time which is set to five times value of this object, Neighbor Expiration time which is set to two times value of this object plus 20 seconds and Leaf Confirmation time which is set to three times value of this object plus 20 seconds.')
a3ComDvmrpMospfPolicy = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 28, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mospf", 1), ("noMospf", 2))).clone('noMospf')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpMospfPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfPolicy.setDescription('If this object is set to mospf(1), the system will import the route source from MOSPF domain into DVMRP. The route source is controlled by the object a3ComDvmrpMospfTable')
a3ComDvmrpDestGroupPolicy = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destGroup", 1), ("noDestGroup", 2))).clone('noDestGroup')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpDestGroupPolicy.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupPolicy.setDescription('This object is used to control data packets forward to MOSPF domain. If this object is set to destGroup(1), data packet will be checked with object a3ComDvmrpDestGroupTable, which function as a filter, before being forwarded to MOSPF domain. If this object is set to noDestGroup(2), data packet is forwarded to MOSPF domain without any checking.')
a3ComDvmrpPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1), )
if mibBuilder.loadTexts: a3ComDvmrpPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortTable.setDescription('This table contains entries of parameters associated with every port or tunnel.')
a3ComDvmrpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpPortIndex"))
if mibBuilder.loadTexts: a3ComDvmrpPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortEntry.setDescription('Each entry contains information for a spcified port or tunnel.')
a3ComDvmrpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortIndex.setDescription('The port number or tunnel ID of which this entry applies. The tunnel ID starts with 1025 and end with 1056, i.e. total tunnel number is limited to 32.')
a3ComDvmrpPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpPortControl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortControl.setDescription('This object allows the multicast routing to run with DVMRP or not.')
a3ComDvmrpPortMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpPortMetric.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortMetric.setDescription("This object specifies the cost to the given port or tunnel. A value of 32 is considered 'infinity'.")
a3ComDvmrpPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpPortRateLimit.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortRateLimit.setDescription('This object specifies the bandwidth in Kbits/second that will be allocated for the multicast datagrams traffic. If set the value to 0 then the full bandwidth of the port will be applied.')
a3ComDvmrpPortAggregateCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpPortAggregateCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpPortAggregateCtrl.setDescription('This object controls the way to advertise routes.')
a3ComDvmrpBoundaryAddrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 2), )
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrTable.setDescription('This table contains multicast addresses to be scoped for each port or tunnel.')
a3ComDvmrpBoundaryAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 2, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpBoundaryAddrPort"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpBoundaryAddrIpAddr"))
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrEntry.setDescription('Each entry contains a single or a range of multicast addresses to be scoped over a specific port or tunnel.')
a3ComDvmrpBoundaryAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrPort.setDescription('The port or tunnel number to which this entry applies.')
a3ComDvmrpBoundaryAddrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrIpAddr.setDescription('This allows you to configure a single or a set of multicast addresses to be scoped that they do not get forwarded beyond a boundary router.')
a3ComDvmrpBoundaryAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrMask.setDescription('This is the subnet mask associated with a3ComDvmrpBoundaryIpAddr of this entry. If this is not specified, the value 255.255.255.255 is used.')
a3ComDvmrpBoundaryAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpBoundaryAddrStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpMospfTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3), )
if mibBuilder.loadTexts: a3ComDvmrpMospfTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfTable.setDescription('This table contains a list of source subnet in MOSPF domain.')
a3ComDvmrpMospfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpMospfIpAddr"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpMospfIpMask"))
if mibBuilder.loadTexts: a3ComDvmrpMospfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfEntry.setDescription('Each entry contains a source subnet in MOSPF domain to be advertised or not to be advertised to the DVMRP domain.')
a3ComDvmrpMospfIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpMospfIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfIpAddr.setDescription("Source subnet's IP address.")
a3ComDvmrpMospfIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpMospfIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfIpMask.setDescription('This is subnet mask associated with a3ComDvmrpMospfIpAddr. It is a number of contiguous leading 1s, i.e. if the value is 1, it indicates the subnet mask is 128.0.0.0, or if the value is 8 then the subnet mask is 255.0.0.0.')
a3ComDvmrpMospfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3, 1, 3), Integer32().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpMospfMetric.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfMetric.setDescription('The routing metric to this source subnet. It ranges from 1 to 31.')
a3ComDvmrpMospfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aggregate", 1), ("individual", 2), ("reject", 3))).clone('aggregate')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpMospfAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfAction.setDescription('If this object is set to aggregate(1), then this source subnet, if learned from MOSPF, is advertised to DVMRP domain in aggregate form. If this object is set to individual(2), then this source subnet, if learned from MOSPF, is advertised to DVMRP domain as it is. Otherwise, the route will not be advertised if the object is set to reject(3).')
a3ComDvmrpMospfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpMospfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpMospfStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 4), )
if mibBuilder.loadTexts: a3ComDvmrpNeighborTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNeighborTable.setDescription('This table contains a list of neighbors entries for each X.25 or Frame-Relay networks.')
a3ComDvmrpNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 4, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpNeighborPort"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpNeighborType"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpNeighborAddr"))
if mibBuilder.loadTexts: a3ComDvmrpNeighborEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNeighborEntry.setDescription('Each entry contains a single X.25 DTE address or a Frame-Relay DLCI.')
a3ComDvmrpNeighborPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNeighborPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNeighborPort.setDescription('The port number to which this entry applies.')
a3ComDvmrpNeighborType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("x25", 2), ("frame-relay", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNeighborType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNeighborType.setDescription('This object specifies the media type of the port.')
a3ComDvmrpNeighborAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNeighborAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNeighborAddr.setDescription('This object specifies an X.25 DTE address or a Frame-Relay DLCI.')
a3ComDvmrpNeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpNeighborStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNeighborStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5), )
if mibBuilder.loadTexts: a3ComDvmrpTunnelTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelTable.setDescription('This table contains entries of tunnel.')
a3ComDvmrpTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpTunnelId"))
if mibBuilder.loadTexts: a3ComDvmrpTunnelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelEntry.setDescription('Each entry contains parameters associated with a specific tunnel.')
a3ComDvmrpTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpTunnelId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelId.setDescription('The ID number of which this entry applies. Tunnel ID starts with 1025 and ends with 1056.')
a3ComDvmrpTunnelLocalIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpTunnelLocalIp.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelLocalIp.setDescription("This object specifies the IP address of local end of a tunnel. It must be one of system's directly connected subnet.")
a3ComDvmrpTunnelRemoteIp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpTunnelRemoteIp.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelRemoteIp.setDescription('This object specifies the IP address of remote end of a tunnel.')
a3ComDvmrpTunnelTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(64)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpTunnelTtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelTtl.setDescription("This object specifies the value to be put in IP packet's TTL field when transmits packets through a tunnel.")
a3ComDvmrpTunnelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 5, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpTunnelStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpTunnelStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpAggreExceptTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 6), )
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptTable.setDescription('The table contains list of subnets not to be aggregated.')
a3ComDvmrpAggreExceptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 6, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpAggreExceptIpAddr"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpAggreExceptIpMask"))
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptEntry.setDescription('Each entry contains a range of subnets.')
a3ComDvmrpAggreExceptIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 6, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptIpAddr.setDescription('This object specifies the IP subnet address.')
a3ComDvmrpAggreExceptIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptIpMask.setDescription('The subnet mask of ccsIpDvmrpAggreExceptIpAddr. It is an integer value representing number of consecutive leading 1s. i.e. if the value is 1, then the subnet mask is 128.0.0.0, if the value is 8 then the subnet mask is 255.0.0.0.')
a3ComDvmrpAggreExceptStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 6, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreExceptStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpAggreRangeTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 7), )
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeTable.setDescription('The table contains range of routes to be aggregated.')
a3ComDvmrpAggreRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 7, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpAggreRangeIpAddr"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpAggreRangeIpMask"))
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeEntry.setDescription('Each entry contains a range of routes.')
a3ComDvmrpAggreRangeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 7, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeIpAddr.setDescription('This object specifies the IP subnet address.')
a3ComDvmrpAggreRangeIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeIpMask.setDescription('The subnet mask of ccsIpDvmrpAggreRangeIpAddr. It is an integer value representing number of consecutive leading 1s. i.e. if the value is 1, then the subnet mask is 128.0.0.0, if the value is 8 then the subnet mask is 255.0.0.0.')
a3ComDvmrpAggreRangeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeMetric.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeMetric.setDescription('This object specifies the cost to the above subnet. If set this object to value 0, the metric associated with the aggregate route to be advertised will pick up the best one among all the aggregated routes.')
a3ComDvmrpAggreRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 7, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpAggreRangeStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpDestGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 8), )
if mibBuilder.loadTexts: a3ComDvmrpDestGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupTable.setDescription("The table contains destination groups to be or not to be forwarded to MOSPF domain. This table will take effect only if object a3ComDvmrpDestGroupPolicy is set to 'destGroup (1)'.")
a3ComDvmrpDestGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 8, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpDestGroupIpAddr"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpDestGroupIpMask"))
if mibBuilder.loadTexts: a3ComDvmrpDestGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupEntry.setDescription('Each entry contains a destination group to be or not to be forwarded to MOSPF domain.')
a3ComDvmrpDestGroupIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 8, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpDestGroupIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupIpAddr.setDescription('This object specifies the destination group IP address, the first byte in decimal must be in the range of 224 to 239.')
a3ComDvmrpDestGroupIpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpDestGroupIpMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupIpMask.setDescription('This is subnet mask associated with a3ComDvmrpDestGroupIpAddr. It is a number of contiguous leading 1s, i.e. if the value is 1, it indicates the subnet mask is 128.0.0.0, or if the value is 8 then the subnet mask is 255.0.0.0.')
a3ComDvmrpDestGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("reject", 2))).clone('accept')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpDestGroupAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupAction.setDescription("This object specifies if this destination group needs to be forwarded to MOSPF domain. If set to 'accept (1)', the group is forwarded to MOSPF domain; if set to 'reject (2)' then the group is filtered out.")
a3ComDvmrpDestGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 2, 8, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDvmrpDestGroupStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpDestGroupStatus.setDescription('This object is used to add and delete entries in this table. See the definition of RowStatus for detail.')
a3ComDvmrpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1), )
if mibBuilder.loadTexts: a3ComDvmrpRouteTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteTable.setDescription('This table contains multicast route information.')
a3ComDvmrpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpRouteSource"))
if mibBuilder.loadTexts: a3ComDvmrpRouteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteEntry.setDescription('Each entry contains route information to a specific subnet or source.')
a3ComDvmrpRouteSource = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteSource.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteSource.setDescription('The source IP address of this route.')
a3ComDvmrpRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteMask.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteMask.setDescription('This object is logical-anded with the source address before comparing to the value in previous object a3ComDvmrpRouteSource.')
a3ComDvmrpRoutePreHop = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRoutePreHop.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRoutePreHop.setDescription('The IP address of the upstream router of this route.')
a3ComDvmrpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteMetric.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteMetric.setDescription("The routing metric of this route. It's routing-protocol dependenable, for DVMRP, the metric should be in range 1 to 31. The value 32 is considered 'infinity' or unreachable.")
a3ComDvmrpRoutePort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRoutePort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRoutePort.setDescription('The port number identifies from which this route comes.')
a3ComDvmrpRouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("direct", 2), ("remote", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteType.setDescription('The type of route.')
a3ComDvmrpRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("up", 2), ("down", 3), ("hold-down", 4), ("garbage-collection", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteStatus.setDescription('The status of route.')
a3ComDvmrpRouteProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("static", 2), ("dvmrp", 3), ("mospf", 4), ("cbt", 5), ("pim", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteProtocol.setDescription('The routing algorithm to which this route applies.')
a3ComDvmrpRouteTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteTtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteTtl.setDescription('The time in seconds this route was last updated.')
a3ComDvmrpRouteChild = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteChild.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteChild.setDescription('This object identifies ports that connect to child subtree of the multicast tree rooted at a3ComDvmrpRouteSource. Each octet, except the first one which contains a value specified length of this object, contains a bit map of 8 ports. The first (should say the second) octet specifies ports from 1 to 8, the next octet specifies ports 9 to 16, ... etc. The most significant bit in each octet represents the lowest port, the least significant bit represents the highest port among those 8 ports. If the bit is set then the corresponding port connects to a child subtree, otherwise the corresponding port does not connect to a child subtree. The tunnel ports does not include in this object, it is specified in next, a3ComDvmrpRouteChildTunnel object.')
a3ComDvmrpRouteChildTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteChildTunnel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteChildTunnel.setDescription('This object is the same as above but includes tunnel ports only. The first (should say the second) octet specifies ports from 1025 (for tunnel port 1) to 1032, the next octet specifies ports 1033 to 1040, ... etc.')
a3ComDvmrpRouteLeaf = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteLeaf.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteLeaf.setDescription('This objec identifies ports that connect to leaf subnet of the multicast tree rooted at a3ComDvmrpRouteSource. The value meaning within each octet is the same as that of a3ComDvmrpRouteChild, except the bit set means the corresponding port connects to a leaf. This object does not include tunnel ports too.')
a3ComDvmrpRouteLeafTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 1, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpRouteLeafTunnel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpRouteLeafTunnel.setDescription('This objec is the same as a3ComDvmrpRouteLeaf object but includes tunnel ports only.')
a3ComDvmrpForwardTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2), )
if mibBuilder.loadTexts: a3ComDvmrpForwardTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardTable.setDescription('This table contains information of each (source, group) pair.')
a3ComDvmrpForwardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpForwardSource"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpForwardGroup"))
if mibBuilder.loadTexts: a3ComDvmrpForwardEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardEntry.setDescription('Each entry contains forwarding information for a specific (source, group) pair.')
a3ComDvmrpForwardSource = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardSource.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardSource.setDescription("This object specifies root's IP address of this (source, group) multicast distribution tree.")
a3ComDvmrpForwardGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardGroup.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardGroup.setDescription('This object specifies the destination multicast group address of this (source, group) multicast distribution tree.')
a3ComDvmrpForwardTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardTtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardTtl.setDescription('This object specifies the time in seconds left for this (source, group) entry to stay in the forwarding table. When this value reaches 0, this (source, group) entry is deleted from the table.')
a3ComDvmrpForwardInPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardInPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardInPort.setDescription('This object specifies the incoming port for the multicast datagrams from the source a3ComDvmrpForwardSource.')
a3ComDvmrpForwardOutPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardOutPorts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardOutPorts.setDescription('This object specifies ports to which multicast datagrams belonging to this (source, group) pair to be forwarded. The value in each octet contains a bit maps of 8 ports, that the significant bit represents the lowest port and the least significant bit represent the highest port. The first octet represents ports 1 to 8, the next octet represents ports 9 to 16, ..., etc. If the bit value is set then the corresponding port will have multicast datagrams to be forwarded. The tunnel ports mapping is put in the next a3ComDvmrpForwardOutPortsTunnel object.')
a3ComDvmrpForwardOutPortsTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardOutPortsTunnel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardOutPortsTunnel.setDescription('This object is the same as a3ComDvmrpForwardOutPorts object but includes tunnel ports mapping only.')
a3ComDvmrpForwardScoped = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardScoped.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardScoped.setDescription('This object specifies if it is a boundary port. If the value of this object is yes(1), it means multicast traffic will not be forwarded on the scoped address, specified in 3ComDvmrpForwardGroup, on this port.')
a3ComDvmrpForwardPruneSent = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpForwardPruneSent.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpForwardPruneSent.setDescription('This object specifies if a Prune message has been sent to its upstream router. A prune message is sent when router wants to leave the multicast delivery tree associated with this (source, group) pair.')
a3ComDvmrpNbrRouterTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3), )
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterTable.setDescription('This table contains information of each neighboring router.')
a3ComDvmrpNbrRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1), ).setIndexNames((0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpNbrRouterPort"), (0, "A3COM-DVMRP-R1-MIB", "a3ComDvmrpNbrRouterIpAddr"))
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterEntry.setDescription("Each entry contains neighboring router's IP address, DVMRP version, generation ID, expiration time and status.")
a3ComDvmrpNbrRouterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterPort.setDescription('The port number or tunnel ID of which this entry applies.')
a3ComDvmrpNbrRouterIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterIpAddr.setDescription('The IP address of this neighboring router.')
a3ComDvmrpNbrRouterGenId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterGenId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterGenId.setDescription('The generation ID of this neighboring router.')
a3ComDvmrpNbrRouterVerProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterVerProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterVerProtocol.setDescription('The version of DVMRP protocol that this neighboring router is running.')
a3ComDvmrpNbrRouterVerMrouted = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterVerMrouted.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterVerMrouted.setDescription("The version of 'mrouted' that this neighboring router is running.")
a3ComDvmrpNbrRouterTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterTtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterTtl.setDescription('The time in seconds left for this neighboring router. When the value reaches 0, this entry is deleted from the table.')
a3ComDvmrpNbrRouterLeafStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterLeafStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterLeafStatus.setDescription('This object specifies if this neighboring router is a leaf node.')
a3ComDvmrpNbrRouterPruneStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterPruneStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterPruneStatus.setDescription('This object specifies if this neighboring router supports DVMRP prune.')
a3ComDvmrpNbrRouterGenIdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterGenIdStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterGenIdStatus.setDescription('This object specifies if this neighboring router provides generation ID and its router list in the DVMRP probe packet.')
a3ComDvmrpNbrRouterMtraceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 28, 3, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterMtraceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDvmrpNbrRouterMtraceStatus.setDescription('This object specifies if this neighboring router supports multicast trace route.')
mibBuilder.exportSymbols("A3COM-DVMRP-R1-MIB", a3ComDvmrpBoundaryAddrStatus=a3ComDvmrpBoundaryAddrStatus, a3ComDvmrpPortEntry=a3ComDvmrpPortEntry, a3ComDvmrpRouteSource=a3ComDvmrpRouteSource, a3ComDvmrpRouteProtocol=a3ComDvmrpRouteProtocol, a3ComDvmrpMospfIpMask=a3ComDvmrpMospfIpMask, a3ComDvmrpTunnelStatus=a3ComDvmrpTunnelStatus, a3ComDvmrpRouteLeafTunnel=a3ComDvmrpRouteLeafTunnel, a3ComDVMRP=a3ComDVMRP, a3ComDvmrpMospfEntry=a3ComDvmrpMospfEntry, a3ComDvmrpForwardPruneSent=a3ComDvmrpForwardPruneSent, a3ComDvmrpMospfStatus=a3ComDvmrpMospfStatus, a3ComDvmrpForwardOutPortsTunnel=a3ComDvmrpForwardOutPortsTunnel, a3ComDvmrpRouteTable=a3ComDvmrpRouteTable, a3ComDvmrpNbrRouterMtraceStatus=a3ComDvmrpNbrRouterMtraceStatus, a3ComDvmrpNbrRouterEntry=a3ComDvmrpNbrRouterEntry, brouterMIB=brouterMIB, a3ComDvmrpTunnelRemoteIp=a3ComDvmrpTunnelRemoteIp, RowStatus=RowStatus, a3ComDvmrpTunnelTtl=a3ComDvmrpTunnelTtl, a3ComDvmrpNbrRouterLeafStatus=a3ComDvmrpNbrRouterLeafStatus, a3ComDvmrpBoundaryAddrMask=a3ComDvmrpBoundaryAddrMask, a3ComDvmrpMospfAction=a3ComDvmrpMospfAction, a3ComDvmrpForwardGroup=a3ComDvmrpForwardGroup, a3ComDvmrpNeighborTable=a3ComDvmrpNeighborTable, a3ComDvmrpBoundaryAddrIpAddr=a3ComDvmrpBoundaryAddrIpAddr, a3ComDvmrpDestGroupPolicy=a3ComDvmrpDestGroupPolicy, a3ComDvmrpCConfig=a3ComDvmrpCConfig, a3ComDvmrpRouteChildTunnel=a3ComDvmrpRouteChildTunnel, a3ComDvmrpRouteMask=a3ComDvmrpRouteMask, a3ComDvmrpMospfIpAddr=a3ComDvmrpMospfIpAddr, a3ComDvmrpAggreRangeIpAddr=a3ComDvmrpAggreRangeIpAddr, a3ComDvmrpAggreRangeEntry=a3ComDvmrpAggreRangeEntry, a3ComDvmrpBoundaryAddrEntry=a3ComDvmrpBoundaryAddrEntry, a3ComDvmrpNbrRouterVerMrouted=a3ComDvmrpNbrRouterVerMrouted, a3ComDvmrpPortRateLimit=a3ComDvmrpPortRateLimit, a3ComDvmrpNeighborPort=a3ComDvmrpNeighborPort, a3ComDvmrpAggreExceptStatus=a3ComDvmrpAggreExceptStatus, a3ComDvmrpForwardOutPorts=a3ComDvmrpForwardOutPorts, a3ComDvmrpRouteMetric=a3ComDvmrpRouteMetric, a3ComDvmrpAggreRangeTable=a3ComDvmrpAggreRangeTable, a3ComDvmrpPortControl=a3ComDvmrpPortControl, a3ComDvmrpForwardTtl=a3ComDvmrpForwardTtl, a3ComDvmrpNbrRouterVerProtocol=a3ComDvmrpNbrRouterVerProtocol, a3ComDvmrpNbrRouterGenIdStatus=a3ComDvmrpNbrRouterGenIdStatus, a3ComDvmrpDestGroupEntry=a3ComDvmrpDestGroupEntry, a3ComDvmrpAggreExceptEntry=a3ComDvmrpAggreExceptEntry, a3ComDvmrpBoundaryAddrTable=a3ComDvmrpBoundaryAddrTable, a3ComDvmrpForwardScoped=a3ComDvmrpForwardScoped, a3ComDvmrpPortMetric=a3ComDvmrpPortMetric, a3ComDvmrpNbrRouterTable=a3ComDvmrpNbrRouterTable, a3ComDvmrpRouteChild=a3ComDvmrpRouteChild, a3ComDvmrpForwardTable=a3ComDvmrpForwardTable, a3ComDvmrpTunnelLocalIp=a3ComDvmrpTunnelLocalIp, a3ComDvmrpForwardInPort=a3ComDvmrpForwardInPort, a3Com=a3Com, a3ComDvmrpBoundaryAddrPort=a3ComDvmrpBoundaryAddrPort, a3ComDvmrpSConfig=a3ComDvmrpSConfig, a3ComDvmrpRouteStatus=a3ComDvmrpRouteStatus, a3ComDvmrpTunnelId=a3ComDvmrpTunnelId, a3ComDvmrpAggreRangeMetric=a3ComDvmrpAggreRangeMetric, a3ComDvmrpRoutePort=a3ComDvmrpRoutePort, a3ComDvmrpAggreExceptIpAddr=a3ComDvmrpAggreExceptIpAddr, a3ComDvmrpRouteType=a3ComDvmrpRouteType, a3ComDvmrpRouteTtl=a3ComDvmrpRouteTtl, a3ComDvmrpNbrRouterPruneStatus=a3ComDvmrpNbrRouterPruneStatus, a3ComDvmrpNeighborType=a3ComDvmrpNeighborType, a3ComDvmrpNeighborAddr=a3ComDvmrpNeighborAddr, a3ComDvmrpAggreRangeIpMask=a3ComDvmrpAggreRangeIpMask, a3ComDvmrpForwardSource=a3ComDvmrpForwardSource, a3ComDvmrpNeighborStatus=a3ComDvmrpNeighborStatus, a3ComDvmrpAggreExceptIpMask=a3ComDvmrpAggreExceptIpMask, a3ComDvmrpRouteEntry=a3ComDvmrpRouteEntry, a3ComDvmrpData=a3ComDvmrpData, a3ComDvmrpDestGroupIpAddr=a3ComDvmrpDestGroupIpAddr, a3ComDvmrpTunnelEntry=a3ComDvmrpTunnelEntry, a3ComDvmrpPortAggregateCtrl=a3ComDvmrpPortAggregateCtrl, a3ComDvmrpMospfTable=a3ComDvmrpMospfTable, a3ComDvmrpAggreExceptTable=a3ComDvmrpAggreExceptTable, a3ComDvmrpPortIndex=a3ComDvmrpPortIndex, a3ComDvmrpMospfPolicy=a3ComDvmrpMospfPolicy, a3ComDvmrpAggreRangeStatus=a3ComDvmrpAggreRangeStatus, a3ComDvmrpPortTable=a3ComDvmrpPortTable, a3ComDvmrpDestGroupStatus=a3ComDvmrpDestGroupStatus, a3ComDvmrpTunnelTable=a3ComDvmrpTunnelTable, a3ComDvmrpCacheTime=a3ComDvmrpCacheTime, a3ComDvmrpNeighborEntry=a3ComDvmrpNeighborEntry, a3ComDvmrpMospfMetric=a3ComDvmrpMospfMetric, a3ComDvmrpDestGroupAction=a3ComDvmrpDestGroupAction, a3ComDvmrpDestGroupTable=a3ComDvmrpDestGroupTable, a3ComDvmrpUpdateTime=a3ComDvmrpUpdateTime, a3ComDvmrpDestGroupIpMask=a3ComDvmrpDestGroupIpMask, a3ComDvmrpPrune=a3ComDvmrpPrune, a3ComDvmrpRouteLeaf=a3ComDvmrpRouteLeaf, a3ComDvmrpForwardEntry=a3ComDvmrpForwardEntry, a3ComDvmrpNbrRouterPort=a3ComDvmrpNbrRouterPort, a3ComDvmrpNbrRouterGenId=a3ComDvmrpNbrRouterGenId, a3ComDvmrpNbrRouterTtl=a3ComDvmrpNbrRouterTtl, a3ComDvmrpNbrRouterIpAddr=a3ComDvmrpNbrRouterIpAddr, a3ComDvmrpRoutePreHop=a3ComDvmrpRoutePreHop)
