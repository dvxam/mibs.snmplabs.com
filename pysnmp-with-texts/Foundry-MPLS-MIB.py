#
# PySNMP MIB module FOUNDRY-MPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/FOUNDRY-MPLS-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:33:40 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
ClassOfService, = mibBuilder.importSymbols("FDRY-MPLS-L2VPN-MIB", "ClassOfService")
AreaID, = mibBuilder.importSymbols("FOUNDRY-SN-OSPF-GROUP-MIB", "AreaID")
snTraps, snMpls = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "snTraps", "snMpls")
MplsTunnelAffinity, = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelAffinity")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, TimeTicks, IpAddress, ModuleIdentity, MibIdentifier, Bits, Gauge32, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "TimeTicks", "IpAddress", "ModuleIdentity", "MibIdentifier", "Bits", "Gauge32", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Counter32", "Unsigned32")
TimeStamp, TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
mpls = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1))
mpls.setRevisions(('2013-05-29 00:00', '2010-06-02 00:00', '2008-02-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mpls.setRevisionsDescriptions(('Changed mplsLspName and mplsLspPathName size to 64 from 32 and 16 respectively.', 'Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', 'Add support for proprietary extensions to the VLL and VPLS mib.',))
if mibBuilder.loadTexts: mpls.setLastUpdated('201006020000Z')
if mibBuilder.loadTexts: mpls.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: mpls.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: mpls.setDescription("This is Brocade's proprietary MIB module for Multi-Protocol Label Switched Paths. Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
mplsLspNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 0))
mplsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1))
mplsLspInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2))
mplsVllInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 3))
mplsVplsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 4))
mplsVersion = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsVersion.setStatus('current')
if mibBuilder.loadTexts: mplsVersion.setDescription('MPLS version number.')
brcdMplsAdminGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 2), )
if mibBuilder.loadTexts: brcdMplsAdminGroupTable.setStatus('current')
if mibBuilder.loadTexts: brcdMplsAdminGroupTable.setDescription('List of administrative groups (by ID) that have a configured group name.')
brcdMplsAdminGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 2, 1), ).setIndexNames((0, "FOUNDRY-MPLS-MIB", "brcdMplsAdminGroupId"))
if mibBuilder.loadTexts: brcdMplsAdminGroupEntry.setStatus('current')
if mibBuilder.loadTexts: brcdMplsAdminGroupEntry.setDescription('Information about an administrative group entry.')
brcdMplsAdminGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: brcdMplsAdminGroupId.setStatus('current')
if mibBuilder.loadTexts: brcdMplsAdminGroupId.setDescription('Identifies the administrative group ID in 1-based. The end user of this object must convert this to 0-based since this maps to the bit position in the constraint-based link selection.')
brcdMplsAdminGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: brcdMplsAdminGroupName.setStatus('current')
if mibBuilder.loadTexts: brcdMplsAdminGroupName.setDescription('The group name that this administrative group is associated with.')
brcdMplsAdminGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: brcdMplsAdminGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: brcdMplsAdminGroupRowStatus.setDescription("The row status of an entry. Note: Set request to this table is not supported in this release. Always returns 'active' for the existing entries.")
brcdMplsInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 3), )
if mibBuilder.loadTexts: brcdMplsInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: brcdMplsInterfaceTable.setDescription('List of MPLS-enabled Interfaces.')
brcdMplsInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 3, 1), ).setIndexNames((0, "FOUNDRY-MPLS-MIB", "brcdMplsInterfaceIndex"))
if mibBuilder.loadTexts: brcdMplsInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: brcdMplsInterfaceEntry.setDescription('Information about an MPLS interface entry.')
brcdMplsInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: brcdMplsInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: brcdMplsInterfaceIndex.setDescription('The ifIndex of the MPLS-enabled port or VE interface.')
brcdMplsInterfaceAdminGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 3, 1, 2), MplsTunnelAffinity()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: brcdMplsInterfaceAdminGroup.setStatus('current')
if mibBuilder.loadTexts: brcdMplsInterfaceAdminGroup.setDescription('Specifies which administrative groups this MPLS-enabled interface belongs to.')
brcdMplsInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 1, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: brcdMplsInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: brcdMplsInterfaceRowStatus.setDescription("The row status of an entry. Note: Set request to this table is not supported in this release. Always returns 'active' for the existing entries.")
mplsConfiguredLsps = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsConfiguredLsps.setStatus('deprecated')
if mibBuilder.loadTexts: mplsConfiguredLsps.setDescription('Number of configured LSPs. Sum of RSVP and static configured LSPs. DEPRECATED BY mplsTunnelConfigured IN rfc3812-MPLS-TE-STD-MIB.')
mplsActiveLsps = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsActiveLsps.setStatus('deprecated')
if mibBuilder.loadTexts: mplsActiveLsps.setDescription('Number of active LSPs. Sum of RSVP, LDP and static LSPs. DEPRECATED BY mplsTunnelActive IN rfc3812-MPLS-TE-STD-MIB.')
mplsLspTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3), )
if mibBuilder.loadTexts: mplsLspTable.setStatus('current')
if mibBuilder.loadTexts: mplsLspTable.setDescription('List of Configured Label Switched Paths.')
mplsLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1), ).setIndexNames((0, "FOUNDRY-MPLS-MIB", "mplsLspSignalingProto"), (0, "FOUNDRY-MPLS-MIB", "mplsLspIndex"))
if mibBuilder.loadTexts: mplsLspEntry.setStatus('current')
if mibBuilder.loadTexts: mplsLspEntry.setDescription('Entry containing information about a particular Label Switched Path.')
mplsLspSignalingProto = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ldp", 1), ("rsvp", 2))))
if mibBuilder.loadTexts: mplsLspSignalingProto.setStatus('current')
if mibBuilder.loadTexts: mplsLspSignalingProto.setDescription('MPLS signaling protocol used by this LSP.')
mplsLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: mplsLspIndex.setStatus('current')
if mibBuilder.loadTexts: mplsLspIndex.setDescription('The unique index of the LSP in the system for a given signaling protocol.')
mplsLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspName.setStatus('current')
if mibBuilder.loadTexts: mplsLspName.setDescription('Name of the Label Switched Path.')
mplsLspState = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("up", 2), ("down", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspState.setStatus('current')
if mibBuilder.loadTexts: mplsLspState.setDescription('The operational state of the LSP.')
mplsLspPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPackets.setStatus('current')
if mibBuilder.loadTexts: mplsLspPackets.setDescription('The number of egress Layer-3 VPN and IPoMPLS packets meeting the in-label and tunnel criteria.')
mplsLspAge = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspAge.setStatus('current')
if mibBuilder.loadTexts: mplsLspAge.setDescription('The age, since creation of this LSP in 10-millisecond periods.')
mplsLspTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspTimeUp.setStatus('current')
if mibBuilder.loadTexts: mplsLspTimeUp.setDescription('The total time in 10-millisecond units that this LSP has been operational. The percentage up time can be determined by computing (mplsLspTimeUp/mplsLspAge * 100 %).')
mplsLspPrimaryTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 8), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPrimaryTimeUp.setStatus('current')
if mibBuilder.loadTexts: mplsLspPrimaryTimeUp.setDescription("The total time in 10-millisecond units that this LSP's primary path has been operational. The percentage contribution of the primary path to the operational time is given by (mplsLspPrimaryTimeUp/mplsLspTimeUp * 100) %.")
mplsLspTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspTransitions.setStatus('current')
if mibBuilder.loadTexts: mplsLspTransitions.setDescription('The number of state transitions (up -> down and down -> up) this LSP has undergone.')
mplsLspLastTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 10), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspLastTransition.setStatus('current')
if mibBuilder.loadTexts: mplsLspLastTransition.setDescription('The time in 10-millisecond units since the last transition occurred on this LSP.')
mplsLspFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrom.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrom.setDescription('Source IP address of this LSP.')
mplsLspTo = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 12), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspTo.setStatus('current')
if mibBuilder.loadTexts: mplsLspTo.setDescription('Destination IP address of this LSP.')
mplsLspPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPathName.setStatus('current')
if mibBuilder.loadTexts: mplsLspPathName.setDescription('The name of the active path for this LSP, if any. If there is none, the name should be empty; in that case, the rest of the fields in mplsLspEntry are meaningless.')
mplsLspPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("primary", 2), ("standby", 3), ("secondary", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPathType.setStatus('current')
if mibBuilder.loadTexts: mplsLspPathType.setDescription('The type of path that is active, i.e., a primary path, a standby path, or a generic secondary path. This field is meaningless unless mplsLspPathName is not empty')
mplsLspAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspAdaptive.setStatus('current')
if mibBuilder.loadTexts: mplsLspAdaptive.setDescription('Indicates if the LSP supports adaptive mechanism or not.')
mplsLspBfdSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspBfdSessionId.setStatus('current')
if mibBuilder.loadTexts: mplsLspBfdSessionId.setDescription('The BFD session ID associated to this LSP. Zero indicates there is no BFD session for this LSP. Non-zero value is an index to an entry in the bfdSessTable')
mplsLspReoptimizeTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(300, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspReoptimizeTimer.setStatus('current')
if mibBuilder.loadTexts: mplsLspReoptimizeTimer.setDescription('The number of seconds from the beginning of one reoptimization attempt to the beginning of the next attempt.')
mplsLspCoS = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 18), ClassOfService()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspCoS.setStatus('current')
if mibBuilder.loadTexts: mplsLspCoS.setDescription('The Class of Service for this LSP.')
mplsLspHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspHopLimit.setStatus('current')
if mibBuilder.loadTexts: mplsLspHopLimit.setDescription('The number of hops this LSP can traverse.')
mplsLspCspf = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspCspf.setStatus('current')
if mibBuilder.loadTexts: mplsLspCspf.setDescription('Indicates if CSPF path calculation is enabled on this LSP.')
mplsLspCspfTieBreaker = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("random", 1), ("leastFill", 2), ("mostFill", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspCspfTieBreaker.setStatus('current')
if mibBuilder.loadTexts: mplsLspCspfTieBreaker.setDescription("The tie-breaker to use for selecting CSPF equal-cost paths. The value of this variable is meaningless if the mplsLspCspf is 'disabled'.")
mplsLspFrrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("detour", 2), ("facility", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrMode.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrMode.setDescription("Indicates which protection method is to be used for Fast Reroute. 'detour' means one-to-one backup and 'facility' for facility backup.")
mplsLspFrrSetupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 23), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrSetupPriority.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrSetupPriority.setDescription("The setup priority for MPLS Fast Reroute. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspFrrHoldingPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrHoldingPriority.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrHoldingPriority.setDescription("The hold priority for MPLS Fast Reroute. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspFrrHopLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrHopLimit.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrHopLimit.setDescription("The hop limit for MPLS Fast Reroute. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspFrrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrBandwidth.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrBandwidth.setDescription("The bandwidth constraint for MPLS Fast Reroute. The value 0 means that the detour route uses a best-effort value for bandwidth. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspFrrAdmGrpIncludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 27), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrAdmGrpIncludeAny.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrAdmGrpIncludeAny.setDescription("The administrative group setting that the device includes any of the interfaces that are members of the group when calculating detour routes for this LSP. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspFrrAdmGrpIncludeAll = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 28), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrAdmGrpIncludeAll.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrAdmGrpIncludeAll.setDescription("The administrative group setting that an interface must be a member of to be considered in a detour route for the LSP. Any interface that is not a member of all the groups is eliminated from consideration. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspFrrAdmGrpExcludeAny = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 29), MplsTunnelAffinity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspFrrAdmGrpExcludeAny.setStatus('current')
if mibBuilder.loadTexts: mplsLspFrrAdmGrpExcludeAny.setDescription("The administrative group setting that the device excludes any of the interfaces that are members of the group when calculating detour routes for this LSP. The value of this variable is meaningless if the mplsLspFrrMode is 'none'.")
mplsLspPathSelectMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2), ("unconditional", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPathSelectMode.setStatus('current')
if mibBuilder.loadTexts: mplsLspPathSelectMode.setDescription("Indicates the path selection mode to use. Auto-select is the default mode. I this mode, the primary path is always selected to carry traffic when the primary path has stayed operating in the working state for at least the amount of time specified in mplsLspPathSelectRevertTimer. For manual-select, traffic is switched to a user- selected path specified in mplsLspPathSelectPathname after the selected path has stayed operating in the working state for at least the amount of time specified in mplsLspPathSelectRevertTimer. For unconditional-select, traffic is switched to and stays on the selected path regardless of the path's condition even if it is in a failure state.")
mplsLspPathSelectPathname = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPathSelectPathname.setStatus('current')
if mibBuilder.loadTexts: mplsLspPathSelectPathname.setDescription("The user-selected pathname when the mplsLspPathSelectMode is either 'manual' or 'unconditional'.")
mplsLspPathSelectRevertTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 32), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspPathSelectRevertTimer.setStatus('current')
if mibBuilder.loadTexts: mplsLspPathSelectRevertTimer.setDescription('The number of seconds to wait after the primary or selected path comes up before traffic reverts to that path. A value of 0 indicates that it will switch immediately after the current working path goes down.')
mplsLspShortcutOspfAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspShortcutOspfAllowed.setStatus('current')
if mibBuilder.loadTexts: mplsLspShortcutOspfAllowed.setDescription('Indicates that this LSP allows shortcut between nodes in an AS. OSPF includes the LSP in its SPF calculation.')
mplsLspShortcutIsisAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspShortcutIsisAllowed.setStatus('current')
if mibBuilder.loadTexts: mplsLspShortcutIsisAllowed.setDescription("Indicates that this LSP allows shortcut through the network to a destination based on the path's cost (metric). Traffic is forwarded through this LSP to destinations within the IS-IS routing domain. IS-IS includes the LSP in its SPF calculation.")
mplsLspShortcutIsisLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("level1", 1), ("level2", 2), ("level1and2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspShortcutIsisLevel.setStatus('current')
if mibBuilder.loadTexts: mplsLspShortcutIsisLevel.setDescription("Indicates the level of IS-IS routing enabled on the device. The value of this variable is meaningless if the mplsLspShortcutIsisAllowed is 'false'.")
mplsLspShortcutIsisAnnounce = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 36), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspShortcutIsisAnnounce.setStatus('current')
if mibBuilder.loadTexts: mplsLspShortcutIsisAnnounce.setDescription("Indicates that this IS-IS shortcut will be announced or advertised. The metric to announce is specified by mplsLspShortcutIsisAnnounceMetric. The value of this variable is meaningless if the mplsLspShortcutIsisAllowed is 'false'.")
mplsLspShortcutIsisAnnounceMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspShortcutIsisAnnounceMetric.setStatus('current')
if mibBuilder.loadTexts: mplsLspShortcutIsisAnnounceMetric.setDescription("Indicates the metric value to announce for this shortcut. The value of this variable is meaningless if the mplsLspShortcutIsisAnnounce is 'false'. Default value is 10.")
mplsLspShortcutIsisRelativeMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 15, 1, 2, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-16777215, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mplsLspShortcutIsisRelativeMetric.setStatus('current')
if mibBuilder.loadTexts: mplsLspShortcutIsisRelativeMetric.setDescription("Indicates the relative metric used to compute the LSP cost when announce is not enabled. The value of this variable is meaningless if the mplsLspShortcutIsisAllowed is 'false'.")
snMplsLspUp = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1010)).setObjects(("FOUNDRY-MPLS-MIB", "mplsLspName"), ("FOUNDRY-MPLS-MIB", "mplsLspPathName"))
if mibBuilder.loadTexts: snMplsLspUp.setStatus('current')
if mibBuilder.loadTexts: snMplsLspUp.setDescription('An mplsLspUp trap signifies that the specified LSP is up. The current active path for the LSP is mplsLspPathName.')
snMplsLspDown = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1011)).setObjects(("FOUNDRY-MPLS-MIB", "mplsLspName"), ("FOUNDRY-MPLS-MIB", "mplsLspPathName"))
if mibBuilder.loadTexts: snMplsLspDown.setStatus('current')
if mibBuilder.loadTexts: snMplsLspDown.setDescription('An mplsLspDown trap signifies that the specified LSP is down, because the current active path mplsLspPathName went down.')
snMplsLspChange = NotificationType((1, 3, 6, 1, 4, 1, 1991, 0, 1012)).setObjects(("FOUNDRY-MPLS-MIB", "mplsLspName"), ("FOUNDRY-MPLS-MIB", "mplsLspPathName"))
if mibBuilder.loadTexts: snMplsLspChange.setStatus('current')
if mibBuilder.loadTexts: snMplsLspChange.setDescription("An mplsLspChange trap signifies that the the specified LSP has switched traffic to the new active path 'toLspPath'. The LSP maintains up state before and after the switch over")
mibBuilder.exportSymbols("FOUNDRY-MPLS-MIB", mplsLspLastTransition=mplsLspLastTransition, brcdMplsAdminGroupEntry=brcdMplsAdminGroupEntry, mplsLspHopLimit=mplsLspHopLimit, mplsLspName=mplsLspName, mplsLspShortcutIsisAnnounce=mplsLspShortcutIsisAnnounce, mplsLspShortcutIsisRelativeMetric=mplsLspShortcutIsisRelativeMetric, brcdMplsInterfaceEntry=brcdMplsInterfaceEntry, mplsLspPathType=mplsLspPathType, mplsLspFrrAdmGrpIncludeAll=mplsLspFrrAdmGrpIncludeAll, mplsLspEntry=mplsLspEntry, mplsLspShortcutIsisAnnounceMetric=mplsLspShortcutIsisAnnounceMetric, mplsLspShortcutIsisLevel=mplsLspShortcutIsisLevel, brcdMplsInterfaceAdminGroup=brcdMplsInterfaceAdminGroup, mplsLspTimeUp=mplsLspTimeUp, mplsLspFrrAdmGrpIncludeAny=mplsLspFrrAdmGrpIncludeAny, mplsLspTo=mplsLspTo, mplsLspReoptimizeTimer=mplsLspReoptimizeTimer, mplsLspFrrBandwidth=mplsLspFrrBandwidth, mplsVplsInfo=mplsVplsInfo, mplsLspInfo=mplsLspInfo, mplsActiveLsps=mplsActiveLsps, mplsLspShortcutOspfAllowed=mplsLspShortcutOspfAllowed, mplsVllInfo=mplsVllInfo, snMplsLspChange=snMplsLspChange, mplsInfo=mplsInfo, mplsVersion=mplsVersion, brcdMplsInterfaceTable=brcdMplsInterfaceTable, brcdMplsAdminGroupTable=brcdMplsAdminGroupTable, mplsLspAdaptive=mplsLspAdaptive, mplsLspCoS=mplsLspCoS, mplsLspFrrMode=mplsLspFrrMode, snMplsLspDown=snMplsLspDown, mplsLspTable=mplsLspTable, mplsLspCspf=mplsLspCspf, mplsLspTransitions=mplsLspTransitions, mplsLspBfdSessionId=mplsLspBfdSessionId, mplsLspFrrSetupPriority=mplsLspFrrSetupPriority, mplsLspCspfTieBreaker=mplsLspCspfTieBreaker, mpls=mpls, mplsLspNotifications=mplsLspNotifications, mplsConfiguredLsps=mplsConfiguredLsps, mplsLspState=mplsLspState, mplsLspPathName=mplsLspPathName, brcdMplsAdminGroupRowStatus=brcdMplsAdminGroupRowStatus, mplsLspFrrHopLimit=mplsLspFrrHopLimit, mplsLspFrom=mplsLspFrom, mplsLspShortcutIsisAllowed=mplsLspShortcutIsisAllowed, PYSNMP_MODULE_ID=mpls, brcdMplsAdminGroupName=brcdMplsAdminGroupName, mplsLspPathSelectRevertTimer=mplsLspPathSelectRevertTimer, mplsLspSignalingProto=mplsLspSignalingProto, mplsLspIndex=mplsLspIndex, mplsLspPrimaryTimeUp=mplsLspPrimaryTimeUp, mplsLspPackets=mplsLspPackets, mplsLspAge=mplsLspAge, brcdMplsAdminGroupId=brcdMplsAdminGroupId, mplsLspPathSelectPathname=mplsLspPathSelectPathname, brcdMplsInterfaceRowStatus=brcdMplsInterfaceRowStatus, mplsLspFrrHoldingPriority=mplsLspFrrHoldingPriority, snMplsLspUp=snMplsLspUp, mplsLspPathSelectMode=mplsLspPathSelectMode, mplsLspFrrAdmGrpExcludeAny=mplsLspFrrAdmGrpExcludeAny, brcdMplsInterfaceIndex=brcdMplsInterfaceIndex)
