#
# PySNMP MIB module A3COM-MLN-R1-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/A3COM-MLN-R1-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:32:24 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, ObjectIdentity, Counter32, IpAddress, Bits, enterprises, Unsigned32, TimeTicks, Counter64, ModuleIdentity, Integer32, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "ObjectIdentity", "Counter32", "IpAddress", "Bits", "enterprises", "Unsigned32", "TimeTicks", "Counter64", "ModuleIdentity", "Integer32", "NotificationType", "iso")
TextualConvention, PhysAddress, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "PhysAddress", "DisplayString")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
a3ComMLN = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 23))
a3mlnStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 23, 10))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3mlnMaxPorts = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnMaxPorts.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMaxPorts.setDescription('The maximum number of virtual and physical ports supported by the agent. This value should be used to verify correct port values.')
a3mlnMaxPhyPorts = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnMaxPhyPorts.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMaxPhyPorts.setDescription('The maximum number of physical ports supported by the agent. This value should be used to verify correct port values.')
a3mlnCCSsaveErr = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnCCSsaveErr.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnCCSsaveErr.setDescription('The count of detected CCS Parameter saves that failed during the previous set operation. A value other than zero indicates that the running and stored configurations are not the same.')
a3mlnCCSdelErr = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnCCSdelErr.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnCCSdelErr.setDescription('The count of detected CCS Parameter deletes that failed during the previous set operation. A value other than zero indicates that the running and stored configurations are not the same.')
a3mlnSetStatus = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("setNoErr", 1), ("setErr", 2), ("setWarning", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnSetStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnSetStatus.setDescription("The application's result of the last SET operation. This object is used to determine if the a3mlnLastSetMsg object is valid, and is NOT for general SNMP errors. In order to see warnings, this object must be polled after any set. The error state is communicated by the agent failing the set operation.")
a3mlnSetMsg = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnSetMsg.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnSetMsg.setDescription("The equalivent UI message for the previous SET operation. Valid only if a3mlnLastSetStatus is set to a value other than `setNoErr'.")
a3mlnPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 23, 7), )
if mibBuilder.loadTexts: a3mlnPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPortTable.setDescription('A table of all physical and virtual ports which may be configured with the Logical Networks service.')
a3mlnPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1), ).setIndexNames((0, "A3COM-MLN-R1-MIB", "a3mlnPindex"))
if mibBuilder.loadTexts: a3mlnPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPortEntry.setDescription('Each entry in this table represents a physical or virtual port.')
a3mlnPindex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPindex.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPindex.setDescription('This object specifies a port entry in the table and is specified as a value within the total port range (a3mlnMaxPorts).')
a3mlnPtype = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ppmPort", 1), ("groupPort", 2), ("memberPort", 3), ("primaryPort", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPtype.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPtype.setDescription("The port's type. A value of `ppmPort' indicates that the port has not been configured in any Logical Network.")
a3mlnPowner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenRing", 2), ("fddi", 3), ("otherMedia", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPowner.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPowner.setDescription("The port's owner (media type). If this is a Group Port, all Member ports must have the same owner. A value of `otherMedia' would imply a non-supported owner (media type).")
a3mlnPlink = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPlink.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPlink.setDescription('For a Group Port, this is either the value of the first member port or, if there are no member ports, the value negative two. For a Member port, this is the value of Group Port.')
a3mlnPstState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("forwarding", 1), ("blocking", 2), ("ignore", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPstState.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPstState.setDescription("The Spanning Tree state of this port. For a Group Port, this is the aggregate of all Member port states. If all Member ports are blocking, the Group Port is blocking. If a single Member port is forwarding, the Group Port is forwarding. For a Member port, this is that port's state. If the port has not been configured as an MLN port, the value `ignore' will be returned.")
a3mlnPtbState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learn", 1), ("noLearn", 2), ("ignore", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPtbState.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPtbState.setDescription("Only valid for Member ports. This is the Transparent Bridge CONTrol value setting of the learn parameter. If the port has not been configured as a Logical Network port, the value `ignore' will be returned.")
a3mlnPgrpPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPgrpPrimaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPgrpPrimaryPort.setDescription("Only valid for Group Ports. This is the value of the physical port assigned as the group's primary port. This value is assigned by the agent and may change over time.")
a3mlnPgrpSrcAdrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPgrpSrcAdrPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPgrpSrcAdrPort.setDescription("Only valid for Group Ports. This is the physical port used to assign the group's source MAC address used for all packets transmitted by the group. This value is assigned by the agent. A value of negative two indicates that no source port has been assigned or that this is not a Group Port.")
a3mlnPgrpSrcAdrMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mediaMAC", 1), ("mediaOther", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPgrpSrcAdrMedia.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPgrpSrcAdrMedia.setDescription("Only valid for Group Ports. This is the media type of the physical port being used for the group's source address. This value is assigned by the agent.")
a3mlnPgrpSrcAdrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 10), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPgrpSrcAdrValue.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPgrpSrcAdrValue.setDescription("Only valid for Group Ports. This is the physical MAC address of the group's source port. In the future, a profile VARIATION should be used to further specify media formats such as MacAddress, SMDSAddress, etc. This value is assigned by the agent.")
a3mlnPgrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPgrpDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPgrpDescription.setDescription('Only valid for Group Ports. This is the description (name) string for this Logical Network.')
a3mlnGroupTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 23, 8), )
if mibBuilder.loadTexts: a3mlnGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGroupTable.setDescription('A table of all configured Logical Network Group Ports.')
a3mlnGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1), ).setIndexNames((0, "A3COM-MLN-R1-MIB", "a3mlnGrpPort"))
if mibBuilder.loadTexts: a3mlnGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGroupEntry.setDescription("Each entry in this table represents a Logical Network's Group Port.")
a3mlnGrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnGrpPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpPort.setDescription('This object specifies an entry in the table, and is a Group Port. Group Ports are virtual ports used as points of attachment to Logical Networks by upper layer clients. Valid values number within the virtual port range (greater than a3mlnMaxPhyPorts and less than a3mlnMaxPorts).')
a3mlnGrpPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("groupPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnGrpPortType.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpPortType.setDescription("This port's type. The only valid value for a Group Port is `groupPort'.")
a3mlnGrpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnGrpPortState.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpPortState.setDescription('The PPM state of this Group Port.')
a3mlnGrpPrimaryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnGrpPrimaryPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpPrimaryPort.setDescription("This is the value of the physical port assigned as the group's primary port. This value is assigned by the agent.")
a3mlnGrpOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenRing", 2), ("fddi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3mlnGrpOwner.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpOwner.setDescription('The owner of this group (which is actually the media type for the group). All Member ports must have the same owner.')
a3mlnGrpMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnGrpMemberCount.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpMemberCount.setDescription('The number of Member ports in this group.')
a3mlnGrpFirstMember = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnGrpFirstMember.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpFirstMember.setDescription('This is the value (index) of the first Member port of this group. A value of negative two indicates that no Member ports have been configured.')
a3mlnGrpDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3mlnGrpDescription.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpDescription.setDescription('The description (name) string for this logical network.')
a3mlnGrpEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 8, 1, 9), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3mlnGrpEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnGrpEntryStatus.setDescription("This object is used to add and delete entries in this table. See RowStatus description at the beginning of this MIB. Note - A group's description may be changed without first deleting the row.")
a3mlnMemberTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 23, 9), )
if mibBuilder.loadTexts: a3mlnMemberTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMemberTable.setDescription('A table of configured Logical Networks.')
a3mlnMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 23, 9, 1), ).setIndexNames((0, "A3COM-MLN-R1-MIB", "a3mlnMemGrpPort"), (0, "A3COM-MLN-R1-MIB", "a3mlnMemPort"))
if mibBuilder.loadTexts: a3mlnMemberEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMemberEntry.setDescription('Each entry in this table represents a Logical Network.')
a3mlnMemGrpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnMemGrpPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMemGrpPort.setDescription('This object specifies a Logical Network within the table and is a Group Port within the virtual port range (greater than a3mlnMaxPhyPorts and less than a3mlnMaxPorts).')
a3mlnMemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnMemPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMemPort.setDescription('This object specifies a Member port within a Logical Network and is a physical port within the physical port range (less than a3mlnMaxPhyPorts).')
a3mlnMemOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 9, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenRing", 2), ("fddi", 3), ("otherMedia", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3mlnMemOwner.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMemOwner.setDescription('The owner of this group (which is actually the media type for the group). All Member ports must have the same owner.')
a3mlnMemEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 9, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3mlnMemEntryStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnMemEntryStatus.setDescription('This object is used to add and delete entries in this table. See RowStatus description at the beginning of this MIB.')
a3mlnStatSelGrpPort = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnStatSelGrpPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnStatSelGrpPort.setDescription('The number of times a Group Port has been selected.')
a3mlnStatSelMacAdr = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnStatSelMacAdr.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnStatSelMacAdr.setDescription('The number of times a MAC address has been selected.')
a3mlnPortStatTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3), )
if mibBuilder.loadTexts: a3mlnPortStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPortStatTable.setDescription('A table of Logical Network Member port statistics.')
a3mlnPortStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1), ).setIndexNames((0, "A3COM-MLN-R1-MIB", "a3mlnPStatIndex"))
if mibBuilder.loadTexts: a3mlnPortStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPortStatEntry.setDescription('Each entry in this table represents statistics for a Member port of a Logical Network.')
a3mlnPStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPStatIndex.setDescription('This object specifies an entry in the port statistics table and is a Member port within the physical port range (less than a3mlnMaxPhyPorts).')
a3mlnPStatRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPStatRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPStatRcvd.setDescription('Count of data frames received on this port.')
a3mlnPStatXmit = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPStatXmit.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPStatXmit.setDescription('Count of data frames transmitted from this port.')
a3mlnPStatStaMoveFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPStatStaMoveFrom.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPStatStaMoveFrom.setDescription('Count of detected stations moving away from this port.')
a3mlnPStatStaMoveTo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPStatStaMoveTo.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPStatStaMoveTo.setDescription('Count of detected stations moving to this port.')
a3mlnPStatSTAchange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 23, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3mlnPStatSTAchange.setStatus('mandatory')
if mibBuilder.loadTexts: a3mlnPStatSTAchange.setDescription('Count of Spanning Tree state changes for this port.')
mibBuilder.exportSymbols("A3COM-MLN-R1-MIB", a3mlnPStatSTAchange=a3mlnPStatSTAchange, RowStatus=RowStatus, a3mlnGrpEntryStatus=a3mlnGrpEntryStatus, a3mlnPtbState=a3mlnPtbState, a3mlnGrpPort=a3mlnGrpPort, a3mlnStatSelMacAdr=a3mlnStatSelMacAdr, a3mlnGrpFirstMember=a3mlnGrpFirstMember, a3mlnMaxPhyPorts=a3mlnMaxPhyPorts, brouterMIB=brouterMIB, a3mlnGrpPortState=a3mlnGrpPortState, a3mlnPStatXmit=a3mlnPStatXmit, a3mlnPowner=a3mlnPowner, a3mlnPortStatTable=a3mlnPortStatTable, a3mlnPStatStaMoveFrom=a3mlnPStatStaMoveFrom, a3mlnPstState=a3mlnPstState, a3mlnPgrpPrimaryPort=a3mlnPgrpPrimaryPort, a3mlnPStatRcvd=a3mlnPStatRcvd, a3mlnPortStatEntry=a3mlnPortStatEntry, a3mlnPortEntry=a3mlnPortEntry, a3mlnPlink=a3mlnPlink, a3mlnGroupEntry=a3mlnGroupEntry, a3mlnStatSelGrpPort=a3mlnStatSelGrpPort, a3Com=a3Com, a3mlnGrpOwner=a3mlnGrpOwner, a3mlnPgrpDescription=a3mlnPgrpDescription, a3mlnMemGrpPort=a3mlnMemGrpPort, a3mlnMemPort=a3mlnMemPort, a3mlnPindex=a3mlnPindex, a3mlnGroupTable=a3mlnGroupTable, a3mlnGrpMemberCount=a3mlnGrpMemberCount, a3mlnPgrpSrcAdrMedia=a3mlnPgrpSrcAdrMedia, a3mlnSetMsg=a3mlnSetMsg, a3mlnMaxPorts=a3mlnMaxPorts, a3mlnPStatIndex=a3mlnPStatIndex, a3mlnGrpPrimaryPort=a3mlnGrpPrimaryPort, a3mlnMemOwner=a3mlnMemOwner, a3mlnGrpDescription=a3mlnGrpDescription, a3mlnCCSsaveErr=a3mlnCCSsaveErr, a3mlnPgrpSrcAdrPort=a3mlnPgrpSrcAdrPort, a3mlnPortTable=a3mlnPortTable, a3mlnMemEntryStatus=a3mlnMemEntryStatus, a3mlnCCSdelErr=a3mlnCCSdelErr, a3mlnSetStatus=a3mlnSetStatus, a3ComMLN=a3ComMLN, a3mlnMemberEntry=a3mlnMemberEntry, a3mlnPgrpSrcAdrValue=a3mlnPgrpSrcAdrValue, a3mlnGrpPortType=a3mlnGrpPortType, a3mlnStatistics=a3mlnStatistics, a3mlnPStatStaMoveTo=a3mlnPStatStaMoveTo, a3mlnMemberTable=a3mlnMemberTable, a3mlnPtype=a3mlnPtype)
