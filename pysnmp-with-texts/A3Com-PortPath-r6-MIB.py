#
# PySNMP MIB module A3COM-PORTPATH-R6-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/A3COM-PORTPATH-R6-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:32:25 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, IpAddress, Unsigned32, Gauge32, MibIdentifier, Bits, NotificationType, iso, Integer32, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "IpAddress", "Unsigned32", "Gauge32", "MibIdentifier", "Bits", "NotificationType", "iso", "Integer32", "ModuleIdentity", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
a3ComPath = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 16))
a3ComPort = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 17))
a3ComPathDial = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 18))
a3ComPortDial = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 19))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

a3ComPathNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathNumber.setDescription('The number of entries in the Path Table. These correspond to physical interfaces in a 3Com product. Note, any changes made to any entry in this table will affect only the value stored in the configuration files. To cause the new values to take effect, the Path status must be toggled. To accomplish this, set the value of a3ComPathAdminStatus.x to active(1). (x indicates the Path number in question)')
a3ComPathTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 16, 2), )
if mibBuilder.loadTexts: a3ComPathTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathTable.setDescription('A table of physical interfaces.')
a3ComPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1), ).setIndexNames((0, "A3COM-PORTPATH-R6-MIB", "a3ComPathIndex"))
if mibBuilder.loadTexts: a3ComPathEntry.setStatus('mandatory')
a3ComPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathIndex.setDescription("A unique identifier for each path. The value for each path must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
a3ComPathName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathName.setDescription('A descriptive name for the path')
a3ComPathPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathPort.setDescription('The index of the entry in the Port table to which this path entry has been assigned. Unassigned entries have a value of zero. This object allows adding and deleting paths from ports.In order for any modifications to take effect, the path(s) associated with this command must be enabled(re-enabled if it is already enable). Paths that have been assigned to the dialpool (pool of dynamic dial paths) have port values of -1. For a read(get) operation, a value of -1 will be returned if the path is not assigned to any port but belongs to the dialpool. A write operation with a value of -1 is not legal and will generate an error return.')
a3ComPathItcmOption = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("compatible", 1), ("incompatible", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathItcmOption.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathItcmOption.setDescription('This object should be set to compatible if the bridge/router is attached via a serial link to a 3Com Series/1 based bridge or bridge/router (IB/3, BR/3) that contains an ITCM board.')
a3ComPathT1Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathT1Mode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathT1Mode.setDescription('Enabling this object allows for better line speed than if this were disabled. However, do not enable this object when a3ComPathItcmOpt is set to compatible.')
a3ComPathCryptoResync = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathCryptoResync.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathCryptoResync.setDescription('Enabling this parameter causes the router to resynch with any attached KG84/91 devices. This only applies to the 449 interface of a wide area bridge/router.')
a3ComPathCRC = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 32))).clone(namedValues=NamedValues(("crc16", 16), ("crc32", 32)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathCRC.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathCRC.setDescription('This controls the type of Cyclic Redundancy Check that is performed on a serial line. In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable).')
a3ComPathAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathAdminStatus.setDescription('This object enables or disables a path.')
a3ComPathOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("notAvailable", 4), ("other", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathOperStatus.setDescription('The actual state of the path.')
a3ComPathBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("notApplicable", 1), ("baud1200", 2), ("baud2400", 3), ("baud4800", 4), ("baud9600", 5), ("baud19200", 6), ("baud38400", 7), ("baud56k", 8), ("baud64k", 9), ("baud128k", 10), ("baud256k", 11), ("baud448k", 12), ("baud1536k", 13), ("baud2048k", 14), ("baud3072k", 15), ("baud4000k", 16), ("baud4608k", 17), ("baud6144k", 18), ("baud7680k", 19), ("baud9216k", 20), ("baud16000k", 21), ("other", 22))).clone('baud64k')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathBaud.setStatus('deprecated')
if mibBuilder.loadTexts: a3ComPathBaud.setDescription('The baud rate for serial paths. For ethernet, token ring, or FDDI connections this has a value notApplicable(1). In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable). Note, this object is being replaced by a3ComPathBaudRate.')
a3ComPathConn = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notApplicable", 1), ("v35", 2), ("rs232", 3), ("rs449", 4), ("g703", 5), ("t3", 6), ("isdnBri", 7), ("isdnPri", 8), ("auto", 9), ("other", 10), ("x21", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathConn.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathConn.setDescription('The connector for the path. For ethernet, token ring, or FDDI connections this has a value notApplicable(1). In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable). Do Not change the order of any of these enumerations.')
a3ComPathClock = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("external", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathClock.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathClock.setDescription('How the transmit clock is derived. For ethernet, token ring, or FDDI connections this has a value notApplicable(1). In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable).')
a3ComPathLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathLastChange.setDescription('The value of sysUpTime at the time the path entered its current operational state.')
a3ComPathSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathSlotIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathSlotIndex.setDescription('The index number of the chassis slot into which the module (or board) that supports this Path is inserted.')
a3ComPathConnPos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathConnPos.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathConnPos.setDescription('The relative position on the module (or board) of the physical connector that supports this path. The position is identified by an index, which starts at one with the upper left connector and continues left to right and top to bottom ending at the lower right connector.')
a3ComPathInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathInOctets.setDescription('The total number of octets received on the path, including framing characters.')
a3ComPathInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathInUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
a3ComPathInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathInNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
a3ComPathInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathInDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
a3ComPathInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathInErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
a3ComPathInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathInUnknownProtos.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathInUnknownProtos.setDescription('The number of packets received via the path which were discarded because of an unknown or unsupported protocol.')
a3ComPathOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathOutOctets.setDescription('The total number of octets transmitted out of the path, including framing characters.')
a3ComPathOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathOutUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
a3ComPathOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathOutNUcastPkts.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
a3ComPathOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathOutDiscards.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
a3ComPathOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathOutErrors.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
a3ComPathBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathBaudRate.setDescription('The baud rate for serial paths. For ethernet, token ring, or FDDI connections this reports the actual value, but SETs are not allowed for those Paths. In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable). Note, this object is replacing a3ComPathBaud, which is being deprecated. For SW release 7.0, both objects will be supported.')
a3ComPathDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 16, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDuplex.setDescription('The duplex mode is for SDLC and V3. It describes the physical characteristics of the communication method used to control the request-to-send signal. It has three values which are full, half and auto. The path has to be (re)enabled for any new setting to take effect.')
a3ComPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 17, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortNumber.setDescription('The number of entries in the Port Table. These correspond to attached or remotely connected network segments.')
a3ComPortTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 17, 2), )
if mibBuilder.loadTexts: a3ComPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortTable.setDescription('A table of attached or remotely connect network segments.')
a3ComPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1), ).setIndexNames((0, "A3COM-PORTPATH-R6-MIB", "a3ComPortIndex"))
if mibBuilder.loadTexts: a3ComPortEntry.setStatus('mandatory')
a3ComPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortIndex.setDescription('A unique value for each port. This corresponds to ifIndex for MIB II. The interface table from MIB II will contain additional information for this port, including its type, its name and its description.')
a3ComPortOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("ethernet", 1), ("tokenRing", 2), ("fddi", 3), ("ppp", 4), ("plg", 5), ("x25", 6), ("frameRelay", 7), ("smds", 8), ("auto", 9), ("autoPpp", 10), ("autoFr", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortOwner.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortOwner.setDescription('This object indicates the owner for this port. User can set the owner using this object, however, if the owner does not match the actual physical interface card associated with this port, it is ignored. If this object has been set to auto(9), the system will automatically determine the proper port owner. In this case, the value of this object when examined via a GET or GETNEXT request will reflect the system determined value, ie. autoPpp(10) or autoFr(11). It will NOT return auto(9). Note, this only applies to High Speed Serial ports.')
a3ComPortBoundaryRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortBoundaryRoute.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortBoundaryRoute.setDescription('This object controls whether the Boundary Routing feature is enabled for this port. Note: this feature only applies to serial ports on a NB2 and will be disabled for non-serial ports. Note, when this parameter is enabled/disabled, the port itself must be disabled and then re-enabled for the new value to take effect. This is done by setting the corresponding instance of ifAdminStatus to up(1).')
a3ComPortBoundaryEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("ethernet", 2), ("tokenring", 3), ("fddi", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortBoundaryEncap.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortBoundaryEncap.setDescription('This object decides the packet encapsulation rules to be applied to outgoing packets. If this is set to none (5), the boundary router on the other end of the serial link is capable of supporting translation. In this case, all bridged packets will be sent unchanged. Boundary routed packets will be sent with the default mode: Ethernet. All other settings of this object implies that the remote device does not support translation. Therefore, all packets must be encapsulated according to this object. In order for any modifications to take effect, the port associated with this command must be disabled and then enabled. Note, this only applies to serial ports on a NB2. For all non-serial ports, this object will have the value notApplicable(1).')
a3ComPortCosInterleave = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortCosInterleave.setStatus('deprecated')
if mibBuilder.loadTexts: a3ComPortCosInterleave.setDescription('(For bridging.) The number of high-priority packets that will be transmitted for each low-priority packet. If the value is 0, then low-priority packets will only be transmitted when there are no packets in the high-priority queue. This object only applies to serial ports. Interleaving will not take affect on non-serial ports and this object will have the value 0 for those ports. Note, this object has been deprecated from software versions 7.0 and later.')
a3ComPortMacAddrFmtARP = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canonical", 1), ("nonCanonical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortMacAddrFmtARP.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortMacAddrFmtARP.setDescription('This object indicates the MAC address format used in ARP packets sent by this port. Note, nonCanonical(2) is allowed only on Token Ring ports.')
a3ComPortMacAddrFmtIPX = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canonical", 1), ("nonCanonical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortMacAddrFmtIPX.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortMacAddrFmtIPX.setDescription('This determine the MAC address format used in IPX packets sent by this port. Note, nonCanonical(2) is allowed only on Token Ring ports.')
a3ComPortMacAddrFmtXNS = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("canonical", 1), ("nonCanonical", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortMacAddrFmtXNS.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortMacAddrFmtXNS.setDescription('This determines the MAC address format used in XNS packets sent by this port. Note, nonCanonical(2) is allowed only on Token Ring ports.')
a3ComPortPath = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortPath.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortPath.setDescription('The Path which is assigned to this port. In some cases, one or more Paths will be assigned to a single Port. This object will return the lowest number Path in that case. For those situations where more than one Port is assigned to a single Path (e.g., nport), this object will return the Path Index (or Parent Port). This object must be specified when adding a new virtual port. In the case where the dialpool (pool of dynamic dial paths) is assigned to a port, a value of -1 will be used to indicate that. When doing a get(read) of either a virtual or non-virtual dial port, a return value of -1 indicates that the dialpool is assigned to that port. A write(set) operation using a path number value of -1 is required only in the case of creating a virtual dynamic dial port; to create a non-virtual dynamic dial port, setting this object is not required.')
a3ComQueueInterleave1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQueueInterleave1.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComQueueInterleave1.setDescription('This object specifies the interleave factor between the high and medium priority port queues. Note, this applies only to HSS ports. For non-HSS ports, this object will have the value 0.')
a3ComQueueInterleave2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQueueInterleave2.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComQueueInterleave2.setDescription('This object specifies the interleave factor between the medium and low priority port queues. Note, this applies only to HSS ports. For non-HSS ports, this object will have the value 0.')
a3ComQueuePattern = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ratio3to3to2", 1), ("ratio4to2to2", 2), ("ratio4to3to1", 3), ("ratio5to2to1", 4), ("ratio6to1to1", 5), ("other", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComQueuePattern.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComQueuePattern.setDescription('This identifies the relative ratios of high priority packets versus medium priority packets versus low priority packets (in that order) that will be transmitted by this port. These ratios are based on the current values of a3ComQueueInterleave1 and a3ComQueueInterleave2. Note, this applies only to HSS ports.')
a3ComPortAsOwnerTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortAsOwnerTimer.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortAsOwnerTimer.setDescription("This object only applies to High Speed Serial ports. When the Owner of this port has been set to Auto, the system will also automatically determine the proper Owner to assign to the port. This object is used to indicate the current status of the system when it is making these determinations. A returned value of -1 indicates auto start-up has failed in determining an owner (path didn't come up). A value of 0 means either auto start-up has succeded in determining the owner or the owner was set manually. A value greater than 0 means the auto start-up is in process and trying to determine the proper port owner.")
a3ComSmartFilteringCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("smartFilter", 1), ("noSmartFilter", 2))).clone('smartFilter')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComSmartFilteringCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComSmartFilteringCtl.setDescription('This object is used to enable or disable the Smart Filtering mechanism on a port. Note, this only applies to the Central Node in a boundary routing environment. Note, when this parameter is enabled/disabled, the Boundary Routing service itself must be disabled and then re-enabled for the new value to take effect. This is done by setting the corresponding instance of a3ComPortBoundaryRoute to disabled(3) and then enabled(2).')
a3ComBrCentralMacCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centralMac", 1), ("noCentralMac", 2))).clone('noCentralMac')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComBrCentralMacCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComBrCentralMacCtl.setDescription("This object is used to enable or disable the Boundary Routing Central MAC feature. If this feature is enabled, (ie, if this object has the value centralMac(1)), the Central Node (in a Boundary Routing environment) will use a special internally saved MAC address as its source MAC address on this port. This will allow certain protocols (such as TCP/IP and IPX) running on the Leaf Nodes to switch to another Central Node without losing sessions. Note, in order for this feature to operate properly, it must be enabled on all the Central Nodes attached to the same Leaf Node. Also note, this feature only applies to Central Nodes (in a Boundary Routing environment) and doesn't apply to the Leaf Nodes. Note, when this parameter is enabled/disabled, the port itself must be disabled and then re-enabled for the new value to take effect. This is done by setting the corresponding instance of ifAdminStatus to up(1).")
a3ComPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortLabel.setDescription('This object specifies the descriptive label assigned to this port by the router. These labels are used by the User Interface and are useful when comparing information retrieved via SNMP with information retrieved via the User Interface.')
a3ComPortCircuitID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 19), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortCircuitID.setDescription('This object applies only to virtual ports and specifies the unique data link circuit or channel identifier assigned to this virtual port. For example, if this virtual port is attached to a Frame Relay network, this object would specify the DLCI associated with this virtual port. The Parent of this virtual port is identified by a3ComPortPath (which also identifies the physical path that this virtual port is associated with). This object must be specified when adding a new virtual port.')
a3ComPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortStatus.setDescription('This object is used to add or delete virtual ports. When adding a new virtual port, only the createAndGo method of adding rows is supported. Specifically, all essential elements of the row must be specified in the same SET request PDU. For a non-dialup (PPP) port, these elements are the circuit identifier (a3ComPortCircuitID), the Parent Port (a3ComPortPath), and the virtual port number (which is specified by the instance identifiers associated with each of these objects). Note, this virtual port number gets mapped uniquely to a port label. It is these port labels that are used to identify ports via the User Interface. For a diaup (PPP) port, these elements are the IncomingCallerID(a3ComPortInCallerId), the dynamic dialpool (a3ComPortPath with value of -1), and the virtual port number.')
a3ComPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 21), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortName.setDescription('The user-assigned name given to this port. Note, this name may not have any blanks.')
a3ComPortVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("virtual", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortVirtual.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortVirtual.setDescription('This object indicates whether this port is a virtual port or a normal port.')
a3ComQueueThrottle = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComQueueThrottle.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComQueueThrottle.setDescription('This object specifies the maximum number of medium and low priority packets that can be sent to the line driver each time some packets are sent to the driver. A value of 0 means that there is no limit.')
a3ComPortInCallerId = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortInCallerId.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortInCallerId.setDescription("A text string to specify the effective Incoming CallerID for the port. This object must be successfully set for a port to use the dynamic dial pool. It is used by the port to decide if an incoming call should be accepted. An incoming call on a dynamic dial path must provide a CallerID matching this object's value in order for the call to be accepted. For a non-virtual port, setting this object alone is sufficient to configure the port to use the dynamic dial pool. Note however, that the dynamic pool can only be used as a Secondary dial path, and not as a Primary path, for a non-virtual port. In the case of a virtual dynamic dial port, this object is used in conjunction with objects a3ComPortPath and a3ComPortStatus to create a virtual dynamic dial port.")
a3ComPortCompType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("history", 2), ("perPacket", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortCompType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortCompType.setDescription('This object specifies the type of compression performed on this Port. NONE indicates that the compression is disabled. HIStory indicates that the compression is enabled and preserves the History across the frames and PerPacket indicates the compression is enabled but history is not preserved across the frames.')
a3ComPortX25ProtID = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(221)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortX25ProtID.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortX25ProtID.setDescription('This object specifies the X25 ProtolID used when running in Boundary Routed Mode for establishing the Virtual Circuits over X25 Link.')
a3ComPortIbmTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 17, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibmTraffic", 1), ("noibmTraffic", 2))).clone('noibmTraffic')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortIbmTraffic.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortIbmTraffic.setDescription('This object is used to enable or disable the SmartFiltering of IBM Traffic mechanism on a port. Note, this only applies to the Central Node in a boundary routing environment. Note, when this parameter is enabled/disabled, the port itself must be disabled and then re-enabled for the new value to take effect. This is done by setting the corresponding instance of ifAdminStatus to up(1).')
a3ComDefaultPriority = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("high", 1), ("med", 2), ("low", 3), ("unknown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComDefaultPriority.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComDefaultPriority.setDescription('This object specifies the default priority queue into which a packet with no preassigned priority is placed. Note, the system retains only a single instance of this parameter and it is relevant only to HSS ports.')
a3ComPathDialNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathDialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialNumber.setDescription('The number of entries in the Path Dial Table. These correspond to physical interfaces in a 3Com product.')
a3ComPathDialTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 18, 2), )
if mibBuilder.loadTexts: a3ComPathDialTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialTable.setDescription('A table of physical interfaces.')
a3ComPathDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1), ).setIndexNames((0, "A3COM-PORTPATH-R6-MIB", "a3ComPathDialIndex"))
if mibBuilder.loadTexts: a3ComPathDialEntry.setStatus('mandatory')
a3ComPathDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPathDialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialIndex.setDescription("A unique identifier for each path. The value for each path must remain constant at least from one re-initialization of the entity's network management system to the next re-initialization.")
a3ComPathDialType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("primaryLeased", 1), ("primaryDial", 2), ("secondaryDial", 3), ("other", 4), ("primaryAuto", 5), ("secondaryAuto", 6), ("secondaryLeased", 7), ("primaryAutoLeased", 8), ("primaryAutoDial", 9), ("secondaryAutoLeased", 10), ("secondaryAutoDial", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialType.setDescription("When assigning multiple paths for a single port, and one or more of those paths is a dial-up Path, this object must identify which Path is the primary Path and whether it is a leased or dial-up Path. Similarly, the other Paths must be identified as secondaryDial. (The secondary Path must be a dial-up Path.) Note, if this object has been set to either primaryAuto(5) or secondaryAuto(6), the system will automatically determine the proper line type to use (ie, leased or dial), and the value of this object when examined via a GET or GETNEXT request will reflect the line type determined by the system. It will not return either primaryAuto(5) or secondaryAuto(6). In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable). This object's values are ignored for non-serial paths.")
a3ComPathDialCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("answerOriginate", 1), ("answerNoOriginate", 2), ("noAnswerOriginate", 3), ("noAnswerNoOriginate", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialCtl.setDescription("For those Paths for which the value of a3ComPathDialType is primaryDial(2) or secondaryDial(3), this object is used to control whether that Path may originate and/or answer calls. If this object has the value answerOriginate(1), this Path can both answer and originate calls. If this object has the value answerNoOriginate(2), this Path can answer calls, but it is not allowed to originate them. If this object has the value noAnswerOriginate(3), this Path is not allowed to answer calls, but it is allowed to originate them. If this object has the value noAnswerNoOriginate(4), this Path is not allowed to answer calls or originate them. In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable). This object's values are ignored for non serial paths. ")
a3ComPathDialAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dial", 1), ("hangUp", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialAction.setDescription('This object is used to initiate an action to be taken by the primary dial-up Path. If this is set to dial(1), then the Path is brought up using the number stored by a3ComPathDialNum. This is only allowed for primary dial-up Paths. If this is set to hangUp(2), then the dial-up Path is brought down. This applies both to primary and secondary paths. If this object is read, the value other(3) will be returned.')
a3ComPathDialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialNum.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialNum.setDescription('This object contains the telephone number of the remote sit to be dialed. This is used whenever a dial-up Path is brought up. Spaces and hyphens (-) are allowed and ignored, and semi-colons (;) indicate a delay (as supported by the modem). If no number is specified by this object, then it is assumed the modem will automatically dial a preconfigured number when DTR is raised.')
a3ComPathDialDodIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialDodIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: a3ComPathDialDodIdleTime.setDescription('This object applies only to a path that is setup as a PrimaryDial path in DialOnDemand mode. It defines the amount of time, in seconds, to wait after detecting the lack of user traffic on the dial path, before bringing the dial line down. note: this object is replaced by a3ComPortDialDodIdleTime.')
a3ComPathDialMode = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("v25Dial", 1), ("dtrDial", 2), ("autoV25", 3), ("autoDTR", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialMode.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialMode.setDescription('This object is used for setting/reading the Dial Mode of a dialup path. Only values (1) and (2) can be set to the object: If the object is (1), the dialup path is configured for V25 mode dialing. If the object is (2), the dialup path is configured for DTR mode dialing. This object cannot be set to autoV25(3) or autoDTR(4), as these are setup automatically by the autostartup dial mode detection logic. The path has to be (re)enabled for any new setting to take effect. Reading of the object can return any 1 of the 4 values.')
a3ComPathDialDynCont = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2), ("other", 3))).clone('static')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialDynCont.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialDynCont.setDescription('This object is used to specify whether the dialup path is of type static(1) or dynamic(3). If a path is made dynamic, it will automatically be assigned(added) into the pool of dynamic paths. Making a path static will cause it to be removed from the pool.')
a3ComPathDialLocalDialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialLocalDialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialLocalDialNumber.setDescription('The telephone number assigned to the local ISDN unit. This number and the local subaddress number, if present, are used primarily to determine if the unit should answer an incoming call. Valid only for ISDN. Any ASCII characters up to 40 are acceptable inputs, but only the valid IA5 characters are used in the comparison. The path has to be enabled for the new setting to take effect.')
a3ComPathDialLocalSubAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialLocalSubAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialLocalSubAddress.setDescription('The subaddress number assigned to the local ISDN unit. If the local dial number criterion passes, then the local subaddress number, if present, is the next criterion used to determine if an incoming call should be answered. Valid only for ISDN. Any ASCII characters are acceptable inputs, but only the valid IA5 characters ( 0 to 9, #,* ) are used in the comparison. The path has to be enabled for the new setting to take effect.')
a3ComPathDialSPIDDN1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialSPIDDN1.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialSPIDDN1.setDescription('The Service Profile Identification number assigned by a North American ISDN switch provider to identify the service profile of a ISDN unit. Valid characters are numeric IA5 characters ( 0 to 9 ). Maximum number of characters is 20. The path has to be enabled for the new setting to take effect.')
a3ComPathDialSPIDDN2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 37))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialSPIDDN2.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialSPIDDN2.setDescription('The second Service Profile Identification number assigned by a North American ISDN switch provider to identify the service profile of a ISDN unit. Valid characters are numeric IA5 characters ( 0 to 9 ). Maximum number of characters is 20. The path has to be enabled for the new setting to take effect.')
a3ComPathDialRateAdaption = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("rate64", 2), ("rate56", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialRateAdaption.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialRateAdaption.setDescription('Specifies the data rate to be used on the ISDN B channel. Rate64 and Rate56 specify that the channel be connected at 64K or 56K, respectively. The connection attempt would fail if the ISDN network does not support this. If Auto is specified, an outgoing call is first attempted at 64K and, if that should fail, the call is retried at 56K. On an incoming call, the call is automatically adapted to the correct rate. The path has to be enabled for the new setting to take effect.')
a3ComPathDialSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("etsi", 1), ("ntt", 2), ("ni1", 3), ("att5ess", 4), ("dms100", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialSwitchType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialSwitchType.setDescription('Specifies the ISDN switch type the unit is connected to. The path has to be enabled for the new setting to take effect.')
a3ComPathDialExDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 18, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("bri", 1), ("modem", 2), ("sw56", 3), ("other", 4))).clone('modem')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPathDialExDevType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPathDialExDevType.setDescription('This object describes the external device type that is connected to the serial-line type (eg, HSS, HDWAN) path. It is applicable only for a dialup path. Use bri(1) setting if the path is connected to a digital modem or terminal adapter for ISDN connectivity. Use modem(2) setting if the path is connected to an analog modem. Use sw56(3) setting if the path is connected to a SWITCH56 CSU/DSU. In order for any modifications to take effect, the path must be enabled(re-enabled if it is already enable).')
a3ComPortDIALNumber = MibScalar((1, 3, 6, 1, 4, 1, 43, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDIALNumber.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDIALNumber.setDescription('The number of entries in the Port DIAL Table. These correspond to attached or remotely connected network segments.')
a3ComPortDialTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 19, 2), )
if mibBuilder.loadTexts: a3ComPortDialTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialTable.setDescription('A table of attached or remotely connect network segments.')
a3ComPortDialEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1), ).setIndexNames((0, "A3COM-PORTPATH-R6-MIB", "a3ComPortDialIndex"))
if mibBuilder.loadTexts: a3ComPortDialEntry.setStatus('mandatory')
a3ComPortDialIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialIndex.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialIndex.setDescription('A unique value for each port. This corresponds to ifIndex for MIB II. The interface table from MIB II will contain additional information for this port, including its type, its name and its description.')
a3ComPortDialDisasterCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disasterRecovery", 1), ("noDisasterRecovery", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialDisasterCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDisasterCtl.setDescription('This object applies only to those Ports to which multiple Paths are assigned, at least one of which is a dial-up Path. If this is set to disasterRecovery(1), then this Port will switch all its traffic to the secondary Path if the primary Path goes down.')
a3ComPortDialBandOnDmnd = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bandwidthOnDemand", 1), ("noBandwidthOnDemand", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialBandOnDmnd.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialBandOnDmnd.setDescription('This object applies only to those Ports to which multiple Paths are assigned, at least one of which is a dial-up Path. If this is set to bandwidthOnDemand(1), then this Port will switch all its traffic to the secondary Path if the primary Path exceeds a pre-defined threshold.')
a3ComPortDialDebounceTimeUp = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialDebounceTimeUp.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDebounceTimeUp.setDescription('This object defines the amount of time, in seconds, to wait after the primary Path has gone down before bringing the secondary dial-up Path up. If the primary Path stays in the down state for this amount of time, the secondary, dial-up, Path is brought up.')
a3ComPortDialDebounceTimeDown = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialDebounceTimeDown.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDebounceTimeDown.setDescription('This object defines the amount of time, in seconds, to wait after the primary Path has come up before bringing the secondary, dial-up, Path down. If the primary Path remains in the up state for this amount of time, the secondary, dial-up, Path is brought down.')
a3ComPortDialInitState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noDialOut", 1), ("manualDial", 2), ("dialOnDemand", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialInitState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialInitState.setDescription('This object applies only to Ports which have paths setup as PrimaryDial paths. It is used to configure the PrimaryDial path as a dial initiator operating in one of the following modes: noDialOut(1), which disables all dialing out on the path; manualDial(2), which requires the user to actively bring the dial path up; or dialOnDemand(3), which will automatically bring the dial path up whenever there is user traffic, and down after a configurable period of idleness on the path. In order for any modifications to take effect, the port must be enabled (re-enabled if it is already enabled).')
a3ComPortDialRcvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAnswer", 1), ("answer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialRcvrState.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialRcvrState.setDescription('This object applies only to Ports which have paths setup as PrimaryDial paths. It is used to configure the PrimaryDial path as a dial receiver operating in one of the following modes: noAnswer(1), which disallows incoming calls on the path; or answer(2), which allows incoming calls on the path. In order for any modifications to take effect, the port must be enabled(re-enabled if it is already enabled). ')
a3ComPortDialAction = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dial", 1), ("hangUp", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialAction.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialAction.setDescription('This object is used to initiate manual dial or hangup action to be taken by the dialup port. If this is set to dial(1), the port will attempt to dial out on its Primary Dial path using the first destination phone number stored by a3ComPortDialPhoneListPhoneNo. If no entry exists, then the number stored by a3ComPathDialNum will be used. If this is set to hangUp(2), then port will attempt to hangup all its active dial paths. If this object is read, the value other(3) will be returned.')
a3ComPortDialDodIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialDodIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDodIdleTime.setDescription('This object applies only to a port that is setup as a dial initiator in DialOnDemand mode. It defines the amount of time, in seconds, to wait after detecting the lack of user traffic on its primary dial path before bringing the dial line down. This idle time applies each time the path is brought down due to lack of user traffic, for the entire duration that a port is operating in DialOnDemand mode.')
a3ComPortDialIdleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(180)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialIdleTime.setDescription('This object applies only to a port that is setup as a dial initiator in ManualDial mode. It defines the amount of time, in seconds, to wait after detecting the lack of user traffic on any of its active dial path before bringing the path down. A value of 0 is used to denote an infinite idle time.')
a3ComPortDialDodCallsMade = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialDodCallsMade.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDodCallsMade.setDescription('The cumulative total number of outgoing calls successfully initiated by the port operating in DialOnDemand mode.')
a3ComPortDialDodCallsFail = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialDodCallsFail.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDodCallsFail.setDescription('The cumulative total number of outgoing calls unsuccessfully initiated by the port operating in DialOnDemand mode.')
a3ComPortDialDodUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialDodUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDodUpTime.setDescription('The cumulative length of time in seconds that the Primary path of a port operating in DialOnDemand mode is Up.')
a3ComPortDialDodPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialDodPktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialDodPktsOut.setDescription('The cumulative total number of user-data packets sent out by the port operating in DialOnDemand mode.')
a3ComPortDialBODTHreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialBODTHreshold.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialBODTHreshold.setDescription('%BODTHreshold% This object specifies the level of sensitivity to bring up a BOD path for a port. The larger BODTHreshold value, the less sensitive to bring up BOD path. For DOD port, when the BODTHreshold is set to 0, the BOD path and the primary path are treated as one path. The port will bring the two paths up and down together. Note, when this parameter is enabled/disabled, the port itself must be disabled and then re-enabled for the new value to take effect. This is done by setting the cirresponding instance of ifAdminStatus to up(1).')
a3ComPortDialPoolPrefTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 19, 3), )
if mibBuilder.loadTexts: a3ComPortDialPoolPrefTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPoolPrefTable.setDescription('A table representing the PoolPreference lists for dynamic dialup ports. A PoolPreference list is a prioritized list of dynamic dial paths that a port can use, and it is optional. Each entry in the list is represented as a row in the table, and it contains a dynamic dial path number and its priority- postion in the list. Priority is in descending position order and it specifies the preference of the port for a particular path. All objects in this table are applicable only for a dynamic dial port, ie, a port with an effective InCallerID, before these objects are specified. ')
a3ComPortDialPoolPrefEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 19, 3, 1), ).setIndexNames((0, "A3COM-PORTPATH-R6-MIB", "a3ComPortDialPoolPrefPort"), (0, "A3COM-PORTPATH-R6-MIB", "a3ComPortDialPoolPrefPathPos"))
if mibBuilder.loadTexts: a3ComPortDialPoolPrefEntry.setStatus('mandatory')
a3ComPortDialPoolPrefPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialPoolPrefPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPoolPrefPort.setDescription('Specifies the port number(portid), used as an index together with a3ComPortDialPoolPrefPathPos, to select a particular row entry.')
a3ComPortDialPoolPrefPathPos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialPoolPrefPathPos.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPoolPrefPathPos.setDescription('Specifies the position(priority) in the PoolPreference list of a path, for the port. Used as an index together with a3ComPortDialPoolPrefPort to select a particular row entry.')
a3ComPortDialPoolPrefPathNum = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialPoolPrefPathNum.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPoolPrefPathNum.setDescription('Specifies the path number(pathid) of a dynamic dial path that will be taken out from the dynamic dial pool and added into the PoolPreference list for the port.')
a3ComPortDialPoolPrefStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialPoolPrefStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPoolPrefStatus.setDescription('This object is used to add or delete a dynamic dial path in the PoolPreference list of a port. Each path and its position in the list is represented as a row. When adding a new path, only the createAndGo method of adding a row is supported. All essential elements of the row must be specified in the same SET request PDU. They are: the path number(a3ComPortDialPoolPrefPathNum), the path position (specified by the instance identifier associated with a3ComPortDialPoolPrefPathPos) and the port number (specified by the instance identifier associated with a3ComPortDialPoolPrefPort).')
a3ComPortDialPhoneListTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 19, 4), )
if mibBuilder.loadTexts: a3ComPortDialPhoneListTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListTable.setDescription('A table representing the PhoneNo lists for dialup ports. Setting up a PhoneNo list is optional for static dialup port, but is required for dynamic dialup port. A PhoneNo list is a prioritized list of destination phone numbers that a port can use to dial out to. Each entry in the list is represented as a row in the table and it contains a phone number, the phone type, its baudrate and its priority (position) in the list. Priority is in descending postion order; and it specifies the preference of the port for a particular phone number. All objects in this table are applicable only for a dialup port. ')
a3ComPortDialPhoneListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1), ).setIndexNames((0, "A3COM-PORTPATH-R6-MIB", "a3ComPortDialPhoneListPort"), (0, "A3COM-PORTPATH-R6-MIB", "a3ComPortDialPhoneListPos"))
if mibBuilder.loadTexts: a3ComPortDialPhoneListEntry.setStatus('mandatory')
a3ComPortDialPhoneListPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialPhoneListPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListPort.setDescription('Specifies the port number(portid), used as an index together with a3ComPortDialPhoneListPos, to select a particular row entry.')
a3ComPortDialPhoneListPos = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ComPortDialPhoneListPos.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListPos.setDescription('Specifies the position(priority) in the PhoneNo list of a phone number, for this port. Used as an index together with a3ComPortDialPhoneListPort, to select a particular row entry.')
a3ComPortDialPhoneListPhoneNo = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 51))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialPhoneListPhoneNo.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListPhoneNo.setDescription('A text string representing a phone number in the PhoneNo list of a port. The phone number is used as the destination phone number to call for an outgoing call. In the case of an ISDN dial line, this text string may also include the Subaddress string following the phone number string, with a colon as a separator between the two.')
a3ComPortDialPhoneListType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("iSDN", 1), ("analog", 2), ("other", 3))).clone('analog')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialPhoneListType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListType.setDescription('Used to specify the phone type attribute of a phone number in the PhoneNo list - either of type ISDN(1) or type Analog(2) or other(3).')
a3ComPortDialPhoneListBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000)).clone(9600)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialPhoneListBaud.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListBaud.setDescription('Used to specify the Baud rate attribute of a phone number in the PhoneList.')
a3ComPortDialPhoneListStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 19, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ComPortDialPhoneListStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ComPortDialPhoneListStatus.setDescription('This object is used to add or delete a phone number from the PhoneNo list of a port. Each phone number and its associated attributes (phone type, Baud rate, and priority-position) is containned in a row. When adding a new phone number, only the createAndGo method of adding row is supported. All essential elements of the row must be specified in the same SET request PDU. They are: phone number(a3ComPortDialPhoneListPhoneNo), phone number position (specified by the instance identifier of a3ComPortDialPhoneListPos), and the port number (specified by the instance identifier of a3ComPortDialPhoneListPort).')
mibBuilder.exportSymbols("A3COM-PORTPATH-R6-MIB", a3ComPortStatus=a3ComPortStatus, a3ComPortDialAction=a3ComPortDialAction, a3ComPortMacAddrFmtXNS=a3ComPortMacAddrFmtXNS, a3ComPathDialExDevType=a3ComPathDialExDevType, a3ComPathDial=a3ComPathDial, a3ComPathOutErrors=a3ComPathOutErrors, a3ComPortEntry=a3ComPortEntry, a3ComPathLastChange=a3ComPathLastChange, a3ComQueueInterleave1=a3ComQueueInterleave1, a3ComPortDialPoolPrefPathPos=a3ComPortDialPoolPrefPathPos, a3ComSmartFilteringCtl=a3ComSmartFilteringCtl, a3ComPathOperStatus=a3ComPathOperStatus, a3ComPathEntry=a3ComPathEntry, a3ComQueuePattern=a3ComQueuePattern, a3ComPathDialSPIDDN1=a3ComPathDialSPIDDN1, a3ComPortCircuitID=a3ComPortCircuitID, a3ComQueueInterleave2=a3ComQueueInterleave2, a3ComPortDialDodIdleTime=a3ComPortDialDodIdleTime, a3ComPathNumber=a3ComPathNumber, a3ComPortCompType=a3ComPortCompType, a3ComPortDialDebounceTimeUp=a3ComPortDialDebounceTimeUp, a3ComPortDIALNumber=a3ComPortDIALNumber, a3ComPortDialPhoneListTable=a3ComPortDialPhoneListTable, brouterMIB=brouterMIB, a3ComPortDialRcvrState=a3ComPortDialRcvrState, a3ComPathDialLocalSubAddress=a3ComPathDialLocalSubAddress, a3ComPortNumber=a3ComPortNumber, a3ComPortX25ProtID=a3ComPortX25ProtID, a3ComPortDialPoolPrefStatus=a3ComPortDialPoolPrefStatus, a3ComPort=a3ComPort, a3ComPathPort=a3ComPathPort, a3ComPathDialTable=a3ComPathDialTable, a3ComPathDialType=a3ComPathDialType, a3ComPortDialTable=a3ComPortDialTable, a3ComPathSlotIndex=a3ComPathSlotIndex, a3ComPortDialIndex=a3ComPortDialIndex, a3ComPortDialPhoneListStatus=a3ComPortDialPhoneListStatus, a3ComPathOutOctets=a3ComPathOutOctets, a3ComPortTable=a3ComPortTable, a3Com=a3Com, a3ComPortInCallerId=a3ComPortInCallerId, a3ComPathInUnknownProtos=a3ComPathInUnknownProtos, a3ComPathDialCtl=a3ComPathDialCtl, a3ComPathTable=a3ComPathTable, a3ComPortDialPoolPrefTable=a3ComPortDialPoolPrefTable, a3ComPortDialDodPktsOut=a3ComPortDialDodPktsOut, a3ComPortDialDodCallsFail=a3ComPortDialDodCallsFail, a3ComPathOutDiscards=a3ComPathOutDiscards, a3ComPathItcmOption=a3ComPathItcmOption, a3ComPathDialAction=a3ComPathDialAction, a3ComPortDialPoolPrefPort=a3ComPortDialPoolPrefPort, a3ComPathDialLocalDialNumber=a3ComPathDialLocalDialNumber, a3ComPath=a3ComPath, a3ComPortDial=a3ComPortDial, a3ComPortDialEntry=a3ComPortDialEntry, a3ComPathIndex=a3ComPathIndex, a3ComPortDialPhoneListEntry=a3ComPortDialPhoneListEntry, a3ComPortDialPhoneListType=a3ComPortDialPhoneListType, a3ComPathDuplex=a3ComPathDuplex, a3ComPathDialDynCont=a3ComPathDialDynCont, a3ComPathName=a3ComPathName, a3ComPathInErrors=a3ComPathInErrors, a3ComPathT1Mode=a3ComPathT1Mode, a3ComPortPath=a3ComPortPath, a3ComDefaultPriority=a3ComDefaultPriority, a3ComPathInNUcastPkts=a3ComPathInNUcastPkts, a3ComPortDialBODTHreshold=a3ComPortDialBODTHreshold, a3ComPathDialMode=a3ComPathDialMode, a3ComPortMacAddrFmtARP=a3ComPortMacAddrFmtARP, a3ComPortIndex=a3ComPortIndex, a3ComPortDialDodUpTime=a3ComPortDialDodUpTime, a3ComPathDialEntry=a3ComPathDialEntry, a3ComPathDialDodIdleTime=a3ComPathDialDodIdleTime, a3ComPortMacAddrFmtIPX=a3ComPortMacAddrFmtIPX, a3ComPortBoundaryRoute=a3ComPortBoundaryRoute, a3ComPathDialRateAdaption=a3ComPathDialRateAdaption, a3ComPathOutUcastPkts=a3ComPathOutUcastPkts, a3ComPortCosInterleave=a3ComPortCosInterleave, a3ComPortOwner=a3ComPortOwner, a3ComPortDialPhoneListBaud=a3ComPortDialPhoneListBaud, a3ComPathDialNum=a3ComPathDialNum, a3ComBrCentralMacCtl=a3ComBrCentralMacCtl, a3ComPortDialDisasterCtl=a3ComPortDialDisasterCtl, a3ComPathDialSwitchType=a3ComPathDialSwitchType, a3ComPortName=a3ComPortName, a3ComPortDialPhoneListPhoneNo=a3ComPortDialPhoneListPhoneNo, a3ComPathConn=a3ComPathConn, a3ComPathCRC=a3ComPathCRC, a3ComPathClock=a3ComPathClock, a3ComPortDialIdleTime=a3ComPortDialIdleTime, a3ComPathConnPos=a3ComPathConnPos, a3ComPortLabel=a3ComPortLabel, a3ComPathDialIndex=a3ComPathDialIndex, a3ComPortDialDebounceTimeDown=a3ComPortDialDebounceTimeDown, a3ComPathBaud=a3ComPathBaud, a3ComPathInOctets=a3ComPathInOctets, a3ComPortDialBandOnDmnd=a3ComPortDialBandOnDmnd, a3ComPathDialNumber=a3ComPathDialNumber, a3ComPortIbmTraffic=a3ComPortIbmTraffic, a3ComPortAsOwnerTimer=a3ComPortAsOwnerTimer, a3ComQueueThrottle=a3ComQueueThrottle, a3ComPortDialPhoneListPort=a3ComPortDialPhoneListPort, a3ComPortDialInitState=a3ComPortDialInitState, a3ComPathInUcastPkts=a3ComPathInUcastPkts, a3ComPathCryptoResync=a3ComPathCryptoResync, a3ComPortVirtual=a3ComPortVirtual, a3ComPortBoundaryEncap=a3ComPortBoundaryEncap, a3ComPathDialSPIDDN2=a3ComPathDialSPIDDN2, RowStatus=RowStatus, a3ComPortDialPoolPrefEntry=a3ComPortDialPoolPrefEntry, a3ComPathInDiscards=a3ComPathInDiscards, a3ComPortDialDodCallsMade=a3ComPortDialDodCallsMade, a3ComPathBaudRate=a3ComPathBaudRate, a3ComPathOutNUcastPkts=a3ComPathOutNUcastPkts, a3ComPortDialPoolPrefPathNum=a3ComPortDialPoolPrefPathNum, a3ComPathAdminStatus=a3ComPathAdminStatus, a3ComPortDialPhoneListPos=a3ComPortDialPhoneListPos)
