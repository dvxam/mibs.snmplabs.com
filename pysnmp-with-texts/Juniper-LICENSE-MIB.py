#
# PySNMP MIB module JUNIPER-LICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/JUNIPER-LICENSE-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:35:23 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
jnxLicenseMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxLicenseMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, ModuleIdentity, Counter32, IpAddress, Counter64, Integer32, NotificationType, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, MibIdentifier, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "ModuleIdentity", "Counter32", "IpAddress", "Counter64", "Integer32", "NotificationType", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "MibIdentifier", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
jnxLicenseMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1))
jnxLicenseMIB.setRevisions(('2010-07-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxLicenseMIB.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: jnxLicenseMIB.setLastUpdated('201007090000Z')
if mibBuilder.loadTexts: jnxLicenseMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxLicenseMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxLicenseMIB.setDescription('Implementation of enterprise specific MIB for license commands and configuration.')
jnxLicenseNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 0))
jnxLicenseObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1))
jnxLicenseInstallObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1))
jnxLicenseSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 2))
jnxLicenseInstallTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1), )
if mibBuilder.loadTexts: jnxLicenseInstallTable.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseInstallTable.setDescription('This table contains installed feature license information.')
jnxLicenseInstallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1, 1), ).setIndexNames((1, "JUNIPER-LICENSE-MIB", "jnxLicenseId"))
if mibBuilder.loadTexts: jnxLicenseInstallEntry.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseInstallEntry.setDescription('A row of giving installed feature license information.')
jnxLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1, 1, 1), DisplayString())
if mibBuilder.loadTexts: jnxLicenseId.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseId.setDescription('Installed feature licenses Id.')
jnxLicenseVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseVersion.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseVersion.setDescription('License Version information')
jnxLicenseDeviceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseDeviceId.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseDeviceId.setDescription('License Device Id ')
jnxLicenseType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("invalid", 0), ("count-down", 1), ("date-based", 2), ("permanent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseType.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseType.setDescription('License type information')
jnxLicenseKeys = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseKeys.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseKeys.setDescription('License Keys')
jnxLicenseFeatureListTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2), )
if mibBuilder.loadTexts: jnxLicenseFeatureListTable.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureListTable.setDescription('list of features supporting Licensing.')
jnxLicenseFeatureListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1), ).setIndexNames((0, "JUNIPER-LICENSE-MIB", "jnxLicenseFeatureId"))
if mibBuilder.loadTexts: jnxLicenseFeatureListEntry.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureListEntry.setDescription('A row of licensed features.')
jnxLicenseFeatureId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: jnxLicenseFeatureId.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureId.setDescription('Feature Id to point an entry in this table')
jnxLicenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseFeatureName.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureName.setDescription('Feature Name')
jnxLicenseFeatureDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseFeatureDescr.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureDescr.setDescription('Feature Name')
jnxLicenseFeatureLicenseId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseId.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseId.setDescription('Feature License Id')
jnxLicenseFeatureLicenseUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseUsed.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseUsed.setDescription('Licenses Used')
jnxLicenseFeatureLicenseInstalled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseInstalled.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseInstalled.setDescription('Licenses Installed')
jnxLicenseFeatureLicenseNeeded = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseNeeded.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseFeatureLicenseNeeded.setDescription('Licenses Needed')
jnxLicenseRenewBeforExpiration = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseRenewBeforExpiration.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseRenewBeforExpiration.setDescription('License renew lead time before expiration in days.')
jnxLicenseRenewInterval = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseRenewInterval.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseRenewInterval.setDescription('License checking interval in hours.')
jnxLicenseAutoUpdate = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLicenseAutoUpdate.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseAutoUpdate.setDescription('License auto update URL of a license server.')
jnxLicenseGraceExpired = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 0, 1)).setObjects(("JUNIPER-LICENSE-MIB", "jnxLicenseFeatureName"))
if mibBuilder.loadTexts: jnxLicenseGraceExpired.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseGraceExpired.setDescription('The SNMP trap that is generated when the license grace period for feature identified by jnxLicenseFeatureName is expired')
jnxLicenseGraceAboutToExpire = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 0, 2)).setObjects(("JUNIPER-LICENSE-MIB", "jnxLicenseFeatureName"))
if mibBuilder.loadTexts: jnxLicenseGraceAboutToExpire.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseGraceAboutToExpire.setDescription('The SNMP trap that is generated when the license grace period for feature identified by jnxLicenseFeatureName is about to expire')
jnxLicenseAboutToExpire = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 0, 3)).setObjects(("JUNIPER-LICENSE-MIB", "jnxLicenseFeatureName"))
if mibBuilder.loadTexts: jnxLicenseAboutToExpire.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseAboutToExpire.setDescription('The SNMP trap that is generated when the license period for feature identified by jnxLicenseFeatureName is about to expire')
jnxLicenseInfringeCumulative = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 0, 4)).setObjects(("JUNIPER-LICENSE-MIB", "jnxLicenseFeatureName"))
if mibBuilder.loadTexts: jnxLicenseInfringeCumulative.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseInfringeCumulative.setDescription('The SNMP trap that is generated when the feature is used more times than as specified in number of licenses allowed for feature as identified by jnxLicenseFeatureName')
jnxLicenseInfringeSingle = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 63, 1, 0, 5)).setObjects(("JUNIPER-LICENSE-MIB", "jnxLicenseFeatureName"))
if mibBuilder.loadTexts: jnxLicenseInfringeSingle.setStatus('current')
if mibBuilder.loadTexts: jnxLicenseInfringeSingle.setDescription('The SNMP trap that is generated when the license for feature identified by jnxLicenseFeatureName is not valid i.e. either expired or not available.')
mibBuilder.exportSymbols("JUNIPER-LICENSE-MIB", jnxLicenseObjects=jnxLicenseObjects, jnxLicenseInstallObjects=jnxLicenseInstallObjects, jnxLicenseVersion=jnxLicenseVersion, jnxLicenseMIB=jnxLicenseMIB, jnxLicenseKeys=jnxLicenseKeys, jnxLicenseFeatureLicenseNeeded=jnxLicenseFeatureLicenseNeeded, jnxLicenseFeatureLicenseInstalled=jnxLicenseFeatureLicenseInstalled, jnxLicenseGraceExpired=jnxLicenseGraceExpired, jnxLicenseAboutToExpire=jnxLicenseAboutToExpire, jnxLicenseId=jnxLicenseId, jnxLicenseDeviceId=jnxLicenseDeviceId, jnxLicenseRenewInterval=jnxLicenseRenewInterval, jnxLicenseNotifications=jnxLicenseNotifications, jnxLicenseGraceAboutToExpire=jnxLicenseGraceAboutToExpire, jnxLicenseInfringeCumulative=jnxLicenseInfringeCumulative, jnxLicenseInstallTable=jnxLicenseInstallTable, jnxLicenseFeatureListEntry=jnxLicenseFeatureListEntry, jnxLicenseType=jnxLicenseType, jnxLicenseFeatureId=jnxLicenseFeatureId, PYSNMP_MODULE_ID=jnxLicenseMIB, jnxLicenseFeatureLicenseId=jnxLicenseFeatureLicenseId, jnxLicenseInstallEntry=jnxLicenseInstallEntry, jnxLicenseFeatureListTable=jnxLicenseFeatureListTable, jnxLicenseAutoUpdate=jnxLicenseAutoUpdate, jnxLicenseInfringeSingle=jnxLicenseInfringeSingle, jnxLicenseFeatureLicenseUsed=jnxLicenseFeatureLicenseUsed, jnxLicenseRenewBeforExpiration=jnxLicenseRenewBeforExpiration, jnxLicenseFeatureDescr=jnxLicenseFeatureDescr, jnxLicenseFeatureName=jnxLicenseFeatureName, jnxLicenseSettings=jnxLicenseSettings)
