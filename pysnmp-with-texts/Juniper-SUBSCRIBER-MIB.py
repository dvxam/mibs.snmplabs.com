#
# PySNMP MIB module JUNIPER-SUBSCRIBER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/JUNIPER-SUBSCRIBER-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:35:24 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
jnxSubscriberMibRoot, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxSubscriberMibRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, Gauge32, Bits, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, IpAddress, NotificationType, Counter32, Unsigned32, Integer32, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Gauge32", "Bits", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "IpAddress", "NotificationType", "Counter32", "Unsigned32", "Integer32", "ObjectIdentity", "TimeTicks")
DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress")
jnxSubscriberMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1))
jnxSubscriberMIB.setRevisions(('2010-05-11 00:00', '2012-05-02 00:00', '2013-12-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxSubscriberMIB.setRevisionsDescriptions(('Initial version of jnxSubscriberMIB module.', 'Updated related to subscriber accounting session id.', 'Added jnxSubscriberAccountingTable MIB.',))
if mibBuilder.loadTexts: jnxSubscriberMIB.setLastUpdated('201312130000Z')
if mibBuilder.loadTexts: jnxSubscriberMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxSubscriberMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxSubscriberMIB.setDescription('The Subscriber MIB for the Juniper Networks enterprise.')
class JnxSubscriberState(TextualConvention, Integer32):
    description = 'The set of possible AAA subscriber states, expressed as a bit map: init INIT state only configured CONFIGURED state only active ACTIVE state only terminated TERMINATED state only terminating TERMINATING state only unknown Unknown state '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("init", 0), ("configured", 1), ("active", 2), ("terminating", 3), ("terminated", 4), ("unknown", 5))

class JnxSubscriberClientType(TextualConvention, Bits):
    description = 'The set of possible AAA subscriber client types: none None of the following dhcp DHCP clients only l2tp L2TP clients only ppp PPP clients only pppoe PPPoE clients only vlan VLAN clients only generic Generic clients only mobileIp Mobile Ip clients only vplsPw VPLS pseudowires only static Static clients only mlppp MLPPP clients only '
    status = 'current'
    namedValues = NamedValues(("none", 0), ("dhcp", 1), ("vlan", 2), ("generic", 3), ("mobileIp", 4), ("vplsPw", 5), ("ppp", 6), ("ppppoe", 7), ("l2tp", 8), ("static", 9), ("mlppp", 10))

jnxSubscriberObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1))
jnxSubscriberGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1))
jnxSubscriberLogicalSystemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2))
jnxSubscriberRoutingInstanceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3))
jnxSubscriberTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberTotalCount.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberTotalCount.setDescription('Total number of subscribers.')
jnxSubscriberActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberActiveCount.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberActiveCount.setDescription('Number of active subscribers.')
jnxSubscriberTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3), )
if mibBuilder.loadTexts: jnxSubscriberTable.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberTable.setDescription('The entries in this table represent subscribers.')
jnxSubscriberInterfaceHardwareIndexTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4), )
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexTable.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexTable.setDescription('The entries in this table represent subscribers Interface Hardware Index.')
jnxSubscriberPortCountTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 5), )
if mibBuilder.loadTexts: jnxSubscriberPortCountTable.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberPortCountTable.setDescription(' The entries in this table represent each port. Each entry contains the port name and the number of active subscribers present on that port.')
jnxSubscriberAccountingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6), )
if mibBuilder.loadTexts: jnxSubscriberAccountingTable.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingTable.setDescription('The entries in this table represent subscribers with accounting.')
jnxSubscriberInterfaceHardwareIndexEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberInterfaceHardwareIndexHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberInterfaceHardwareIndexHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexEntry.setDescription('A specification of subscribers.')
jnxSubscriberInterfaceHardwareIndexHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexHandleHiWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexHandleHiWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the most significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberInterfaceHardwareIndexHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexHandleLoWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndexHandleLoWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the least significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberInterfaceHardwareIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndex.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterfaceHardwareIndex.setDescription('The subscriber interface hardware index.')
jnxSubscriberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberEntry.setDescription('A specification of subscribers.')
jnxSubscriberHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberHandleHiWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberHandleHiWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the most significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberHandleLoWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberHandleLoWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the least significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberUserName.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberUserName.setDescription('The userName associated with this subscriber.')
jnxSubscriberClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 4), JnxSubscriberClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberClientType.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberClientType.setDescription('The client type for this subscriber.')
jnxSubscriberIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberIpAddress.setDescription('The client IP Address assigned to this subscriber.')
jnxSubscriberIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberIpAddressMask.setDescription('The client IP Address Mask assigned to this subscriber.')
jnxSubscriberLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystem.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystem.setDescription('The logical system associated with this subscriber.')
jnxSubscriberRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstance.setDescription('The routing instance associated with this subscriber.')
jnxSubscriberInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberInterface.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterface.setDescription('The textual name of the interface associated with this subscriber.')
jnxSubscriberInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberInterfaceType.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberInterfaceType.setDescription('The type of the interface associated with this subscriber.')
jnxSubscriberMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberMacAddress.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberMacAddress.setDescription('The MAC address of the interface associated with this subscriber.')
jnxSubscriberState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 12), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberState.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberState.setDescription('The state of this subscriber.')
jnxSubscriberLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLoginTime.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLoginTime.setDescription('The time this subscriber logged in to the server.')
jnxSubscriberAcctSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAcctSessionId.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAcctSessionId.setDescription('The accounting session id associated with this subscriber.')
jnxSubscriberPortCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberPort"))
if mibBuilder.loadTexts: jnxSubscriberPortCountEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberPortCountEntry.setDescription('A specification of Port containing the port name and the number of active subscribers on that port')
jnxSubscriberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: jnxSubscriberPort.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberPort.setDescription('Name of the port in string')
jnxSubscriberPortTunneledCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 5, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberPortTunneledCounter.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberPortTunneledCounter.setDescription('Number of active Tunneled subscribers present on the port')
jnxSubscriberPortTerminatedCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 5, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberPortTerminatedCounter.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberPortTerminatedCounter.setDescription('Number of active Tunneled subscribers present on the port')
jnxSubscriberLogicalSystemTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemTotalCount.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemTotalCount.setDescription('The number of total subscribers on the logical system.')
jnxSubscriberLogicalSystemActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemActiveCount.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemActiveCount.setDescription('The number of active subscribers on the logical system.')
jnxSubscriberLogicalSystemTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3), )
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemTable.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemTable.setDescription("The entries in this table sort subscribers within the logical system. The logical system name must be provided in the SNMP query. The logical system will be identified by either the context field in V3 requests, or it will be encoded in the community string in V1 or V2c requests. User can query for logical-system/routing-instance specific data by prefixing the community string with <logical-system>/<routing-instance>@, where '@' acts as a separator between community name and routing-instance name. If no logical system is specified, this table shows data for the default logical system. The name of the routing instance is ignored for this table.")
jnxSubscriberLogicalSystemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberLogicalSystemHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberLogicalSystemHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemEntry.setDescription('A specification of subscribers within the logical system.')
jnxSubscriberLogicalSystemHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemHandleHiWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemHandleHiWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the most significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberLogicalSystemHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemHandleLoWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemHandleLoWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the least significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberLogicalSystemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 2, 3, 1, 3), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemState.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberLogicalSystemState.setDescription('The state of this subscriber.')
jnxSubscriberRoutingInstanceTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceTotalCount.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceTotalCount.setDescription('The number of total subscribers on the routing instance.')
jnxSubscriberRoutingInstanceActiveCount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceActiveCount.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceActiveCount.setDescription('The number of active subscribers on the routing instance.')
jnxSubscriberRoutingInstanceTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3), )
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceTable.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceTable.setDescription("The entries in this table sort subscribers within routing instance. The routing instance name must be provided in the SNMP query. The routing instance will be identified by either the context field in V3 requests, or it will be encoded in the community string in V1 or V2c requests. User can query for logical-system/routing-instance specific data by prefixing the community string with <logical-system>/<routing-instance>@, where '@' acts as a separator between community name and routing-instance name. If no routing instance is specified, this table shows data for the default routing instance. The name of the logical system is ignored for this table.")
jnxSubscriberRoutingInstanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1), ).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberRoutingInstanceHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberRoutingInstanceHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceEntry.setDescription('A specification of subscribers within routing instance.')
jnxSubscriberRoutingInstanceHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceHandleHiWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceHandleHiWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the most significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberRoutingInstanceHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceHandleLoWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceHandleLoWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the least significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberRoutingInstanceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 3, 3, 1, 3), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceState.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberRoutingInstanceState.setDescription('The state of this subscriber.')
jnxSubscriberAccountingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1), ).setIndexNames((0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberAccountingHandleHiWord"), (0, "JUNIPER-SUBSCRIBER-MIB", "jnxSubscriberAccountingHandleLoWord"))
if mibBuilder.loadTexts: jnxSubscriberAccountingEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingEntry.setDescription('A specification of subscribers with Accounting.')
jnxSubscriberAccountingHandleHiWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberAccountingHandleHiWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingHandleHiWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the most significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberAccountingHandleLoWord = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: jnxSubscriberAccountingHandleLoWord.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingHandleLoWord.setDescription('The subscriber handle associated with this subscriber. A subscriber handle is a monotonically increasing number. This object is equal to the least significant 32 bit of the 64 bit subscriber id.')
jnxSubscriberAccountingUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingUserName.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingUserName.setDescription('The userName associated with this subscriber.')
jnxSubscriberAccountingClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 4), JnxSubscriberClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingClientType.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingClientType.setDescription('The client type for this subscriber.')
jnxSubscriberAccountingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingIpAddress.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingIpAddress.setDescription('The client IP Address assigned to this subscriber.')
jnxSubscriberAccountingIpAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingIpAddressMask.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingIpAddressMask.setDescription('The client IP Address Mask assigned to this subscriber.')
jnxSubscriberAccountingLogicalSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingLogicalSystem.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingLogicalSystem.setDescription('The logical system associated with this subscriber.')
jnxSubscriberAccountingRoutingInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingRoutingInstance.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingRoutingInstance.setDescription('The routing instance associated with this subscriber.')
jnxSubscriberAccountingInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingInterface.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingInterface.setDescription('The textual name of the interface associated with this subscriber.')
jnxSubscriberAccountingInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingInterfaceType.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingInterfaceType.setDescription('The type of the interface associated with this subscriber.')
jnxSubscriberAccountingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 11), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingMacAddress.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingMacAddress.setDescription('The MAC address of the interface associated with this subscriber.')
jnxSubscriberAccountingState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 12), JnxSubscriberState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingState.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingState.setDescription('The state of this subscriber.')
jnxSubscriberAccountingLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingLoginTime.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingLoginTime.setDescription('The time this subscriber logged in to the server.')
jnxSubscriberAccountingAcctSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 64, 1, 1, 1, 6, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSubscriberAccountingAcctSessionId.setStatus('current')
if mibBuilder.loadTexts: jnxSubscriberAccountingAcctSessionId.setDescription('The accounting session id associated with this subscriber.')
mibBuilder.exportSymbols("JUNIPER-SUBSCRIBER-MIB", jnxSubscriberRoutingInstanceTable=jnxSubscriberRoutingInstanceTable, jnxSubscriberUserName=jnxSubscriberUserName, jnxSubscriberState=jnxSubscriberState, jnxSubscriberRoutingInstanceHandleLoWord=jnxSubscriberRoutingInstanceHandleLoWord, PYSNMP_MODULE_ID=jnxSubscriberMIB, jnxSubscriberGeneral=jnxSubscriberGeneral, jnxSubscriberPortTerminatedCounter=jnxSubscriberPortTerminatedCounter, jnxSubscriberLogicalSystemState=jnxSubscriberLogicalSystemState, jnxSubscriberAccountingInterface=jnxSubscriberAccountingInterface, jnxSubscriberAccountingIpAddress=jnxSubscriberAccountingIpAddress, jnxSubscriberLogicalSystem=jnxSubscriberLogicalSystem, jnxSubscriberPort=jnxSubscriberPort, jnxSubscriberAccountingIpAddressMask=jnxSubscriberAccountingIpAddressMask, jnxSubscriberHandleHiWord=jnxSubscriberHandleHiWord, jnxSubscriberLogicalSystemTable=jnxSubscriberLogicalSystemTable, jnxSubscriberRoutingInstanceActiveCount=jnxSubscriberRoutingInstanceActiveCount, jnxSubscriberAccountingRoutingInstance=jnxSubscriberAccountingRoutingInstance, jnxSubscriberAccountingLogicalSystem=jnxSubscriberAccountingLogicalSystem, jnxSubscriberPortCountEntry=jnxSubscriberPortCountEntry, jnxSubscriberObjects=jnxSubscriberObjects, jnxSubscriberLogicalSystemEntry=jnxSubscriberLogicalSystemEntry, jnxSubscriberAccountingState=jnxSubscriberAccountingState, JnxSubscriberState=JnxSubscriberState, jnxSubscriberInterfaceHardwareIndexHandleLoWord=jnxSubscriberInterfaceHardwareIndexHandleLoWord, jnxSubscriberAccountingEntry=jnxSubscriberAccountingEntry, jnxSubscriberAccountingAcctSessionId=jnxSubscriberAccountingAcctSessionId, jnxSubscriberLogicalSystemHandleHiWord=jnxSubscriberLogicalSystemHandleHiWord, jnxSubscriberLoginTime=jnxSubscriberLoginTime, JnxSubscriberClientType=JnxSubscriberClientType, jnxSubscriberEntry=jnxSubscriberEntry, jnxSubscriberInterfaceType=jnxSubscriberInterfaceType, jnxSubscriberRoutingInstanceObjects=jnxSubscriberRoutingInstanceObjects, jnxSubscriberTotalCount=jnxSubscriberTotalCount, jnxSubscriberAccountingHandleHiWord=jnxSubscriberAccountingHandleHiWord, jnxSubscriberInterface=jnxSubscriberInterface, jnxSubscriberAccountingUserName=jnxSubscriberAccountingUserName, jnxSubscriberIpAddressMask=jnxSubscriberIpAddressMask, jnxSubscriberRoutingInstanceState=jnxSubscriberRoutingInstanceState, jnxSubscriberPortCountTable=jnxSubscriberPortCountTable, jnxSubscriberRoutingInstanceEntry=jnxSubscriberRoutingInstanceEntry, jnxSubscriberLogicalSystemObjects=jnxSubscriberLogicalSystemObjects, jnxSubscriberAcctSessionId=jnxSubscriberAcctSessionId, jnxSubscriberLogicalSystemActiveCount=jnxSubscriberLogicalSystemActiveCount, jnxSubscriberActiveCount=jnxSubscriberActiveCount, jnxSubscriberAccountingInterfaceType=jnxSubscriberAccountingInterfaceType, jnxSubscriberAccountingMacAddress=jnxSubscriberAccountingMacAddress, jnxSubscriberClientType=jnxSubscriberClientType, jnxSubscriberInterfaceHardwareIndex=jnxSubscriberInterfaceHardwareIndex, jnxSubscriberInterfaceHardwareIndexEntry=jnxSubscriberInterfaceHardwareIndexEntry, jnxSubscriberLogicalSystemTotalCount=jnxSubscriberLogicalSystemTotalCount, jnxSubscriberAccountingClientType=jnxSubscriberAccountingClientType, jnxSubscriberPortTunneledCounter=jnxSubscriberPortTunneledCounter, jnxSubscriberInterfaceHardwareIndexHandleHiWord=jnxSubscriberInterfaceHardwareIndexHandleHiWord, jnxSubscriberHandleLoWord=jnxSubscriberHandleLoWord, jnxSubscriberAccountingHandleLoWord=jnxSubscriberAccountingHandleLoWord, jnxSubscriberRoutingInstance=jnxSubscriberRoutingInstance, jnxSubscriberIpAddress=jnxSubscriberIpAddress, jnxSubscriberRoutingInstanceTotalCount=jnxSubscriberRoutingInstanceTotalCount, jnxSubscriberAccountingLoginTime=jnxSubscriberAccountingLoginTime, jnxSubscriberTable=jnxSubscriberTable, jnxSubscriberRoutingInstanceHandleHiWord=jnxSubscriberRoutingInstanceHandleHiWord, jnxSubscriberMacAddress=jnxSubscriberMacAddress, jnxSubscriberLogicalSystemHandleLoWord=jnxSubscriberLogicalSystemHandleLoWord, jnxSubscriberInterfaceHardwareIndexTable=jnxSubscriberInterfaceHardwareIndexTable, jnxSubscriberMIB=jnxSubscriberMIB, jnxSubscriberAccountingTable=jnxSubscriberAccountingTable)
