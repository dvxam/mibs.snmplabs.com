#
# PySNMP MIB module A3COM-IPXPOLICY-R3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/tin/Dev/mibs.snmplabs.com/asn1/A3COM-IPXPOLICY-R3-MIB
# Produced by pysmi-0.3.4 at Fri Jan 31 21:32:23 2020
# On host bier platform Linux version 5.4.0-3-amd64 by user tin
# Using Python version 3.7.6 (default, Jan 19 2020, 22:34:52) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
MacAddress, = mibBuilder.importSymbols("RFC1286-MIB", "MacAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, Counter64, IpAddress, ModuleIdentity, enterprises, MibIdentifier, iso, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Gauge32, NotificationType, Unsigned32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "IpAddress", "ModuleIdentity", "enterprises", "MibIdentifier", "iso", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Gauge32", "NotificationType", "Unsigned32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
a3Com = MibIdentifier((1, 3, 6, 1, 4, 1, 43))
brouterMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2))
a3ComIPXpol = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 11))
a3ipxPolNbr = MibIdentifier((1, 3, 6, 1, 4, 1, 43, 2, 11, 5))
class RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("notInService", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6))

class IPXNET(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(4, 4)
    fixedLength = 4

a3ipxPolControlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 1), )
if mibBuilder.loadTexts: a3ipxPolControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolControlTable.setDescription('This table enables and disables the use of policies, policy attributes and the use of trusted neighbors and their attributes.')
a3ipxPolControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPCPort"))
if mibBuilder.loadTexts: a3ipxPolControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolControlEntry.setDescription('A single entry in the Policy Control Table')
a3ipxPCPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPCPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCPort.setDescription('The port to which this Policy Control entry applies.')
a3ipxPCRteAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteAdvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCRteAdvCtl.setDescription("The object enables or disables the use of the 'advertisable' entries in the Route Policy Table.")
a3ipxPCRteAdvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteAdvType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCRteAdvType.setDescription("The object specifies whether only those routes listed as 'advertisable' in the Route Policy Table are advertised from this port (normal), or if only those routes that are not listed as 'advertisable' in the Route Policy Table are advertised (inverse).")
a3ipxPCRteRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteRcvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCRteRcvCtl.setDescription("The object enables or disables the use of the 'receivable' entries in the Route Policy Table.")
a3ipxPCRteRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRteRcvType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCRteRcvType.setDescription("The object specifies whether only those routes listed as 'receivable' in the Route Policy Table are accepted from this port (normal), or if only those routes that are not listed as 'receivable' in the Route Policy Table are accepted (inverse).")
a3ipxPCSvcAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcAdvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCSvcAdvCtl.setDescription("The object enables or disables the use of the 'advertisable' entries in the Service Policy Table.")
a3ipxPCSvcAdvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcAdvType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCSvcAdvType.setDescription("The object specifies whether only those routes listed as 'advertisable' in the Service Policy Table are advertised from this port (normal), or if only those routes that are not listed as 'advertisable' in the Service Policy Table are advertised (inverse).")
a3ipxPCSvcRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcRcvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCSvcRcvCtl.setDescription("The object enables or disables the use of the 'receivable' entries in the Service Policy Table.")
a3ipxPCSvcRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvcRcvType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCSvcRcvType.setDescription("The object specifies whether only those routes listed as 'receivable' in the Service Policy Table are accepted from this port (normal), or if only those routes that are not listed as 'receivable' in the Service Policy Table are accepted (inverse).")
a3ipxPCNbrAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCNbrAdvCtl.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPCNbrAdvCtl.setDescription('This object enables or disables the use of the entries in the Neighbor Policy Table that apply to neighbors to which routing and service reachability information is advertised. In other words, this object enables or disables the use of those entries in the Neighbor Policy Table for which a3ipxPolNbrType = advertise(2) or both(3). NOTE: this object is not supported by NETBuilders running sw version 8.0 and greater. Its functionality has been replaced by a3ipxRipPolNbrCtlTable and a3ipxSapPolNbrCtlTable.')
a3ipxPCNbrRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCNbrRcvCtl.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPCNbrRcvCtl.setDescription('The object enables or disables the use of the entries in the Neighbor Policy Table that apply to neighbors from which routing and service reachability information is allowed to be received. In other words, this object enables or disables the use of those entries in the Neighbor Policy Table for which a3ipxPolNbrType = receive(2) or both(3). NOTE: this object is not supported by NETBuilders running sw version 8.0 and greater. Its functionality has been replaced by a3ipxRipPolNbrCtlTable and a3ipxSapPolNbrCtlTable.')
a3ipxPCNbrRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCNbrRcvType.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPCNbrRcvType.setDescription('If this object is set to normal(1), then route and service reachability information is accepted only from those neighbors listed in the Neighbor Policy Table for which a3ipxPolNbrType = receive(2) or both(3). If this object is set to inverse(2), then route and service reachability information is accepted from any neighbor except those neighbors listed in the Neighbor Policy Table for which a3ipxPolNbrType = receive(2) or both(3). NOTE: this object is not supported by NETBuilders running sw version 8.0 and greater. Its functionality has been replaced by a3ipxRipPolNbrCtlTable and a3ipxSapPolNbrCtlTable.')
a3ipxPCPolicyOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("policyOverride", 1), ("noPolicyOverride", 2))).clone('noPolicyOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCPolicyOverride.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPCPolicyOverride.setDescription('Policy Override is used to override the configured policies when the router issues responses to specific RIP or SAP requests. The configured policies are always applied for regular RIP or SAP updates. NOTE: this object is no longer support by NETBuilders running sw version 8.0 and greater. Its functionality has been replaced by a3ipxPCRipPolOverride and a3ipxPCSapPolOverride.')
a3ipxPCSvrRplyCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bestSvrReply", 1), ("noBestSvrReply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSvrRplyCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCSvrRplyCtl.setDescription("This controls whether or not the router is permitted to respond to 'get nearest server' requests. If this object has the value bestSvrReply(1), then this router is permitted to respond to these requests. If this object has the value noBestSvrReply(2), this this router is not permitted to respond to these requests.")
a3ipxPCRipPolOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("policyOverride", 1), ("noPolicyOverride", 2))).clone('noPolicyOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCRipPolOverride.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCRipPolOverride.setDescription('RIP Policy Override is used to override the configured RIP policies when the router issues responses to specific RIP requests. The configured policies are always applied for regular RIP updates.')
a3ipxPCSapPolOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("policyOverride", 1), ("noPolicyOverride", 2))).clone('noPolicyOverride')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPCSapPolOverride.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPCSapPolOverride.setDescription('SAP Policy Override is used to override the configured policies when the router issues responses to specific SAP requests. The configured policies are always applied for regular SAP updates.')
a3ipxPolRteTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 2), )
if mibBuilder.loadTexts: a3ipxPolRteTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRteTable.setDescription("The IPX Route Policy Table controls the acceptance of route reachability information from neighbors and the advertisement of route reachability information to neighbors. If a3ipxPCRteRcvType is configured as normal, a route is accepted if the network number for the route is in the list of 'receivable' networks specified in this table. If a3ipxPCRteRcvType is configure as inverse, a route is not accepted if the network number for the route is in the list of 'receivable' networks specified in this table. If a3ipxPCRteAdvType is configured as normal, a route is advertised if the network number for the route is in the list of 'advertisable' networks specified in this table. If a3ipxPCRteAdvType is configure as inverse, a route is not advertised if the network number for the route is in the list of 'advertisable' networks specified in this table. Note, since this table allows ranges of routes to be specified, all the entries should be examined when determining if a specific route is affected by these policies. It is not sufficient to search for an instance of a3ipxPolRteNet1 that matches the route in question.")
a3ipxPolRteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRtePort"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRteNet1"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRteNet2"))
if mibBuilder.loadTexts: a3ipxPolRteEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRteEntry.setDescription('A single entry in the Route Policy table')
a3ipxPolRtePort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRtePort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRtePort.setDescription('The IPX port to which this Receive Route Policy entry applies.')
a3ipxPolRteType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRteType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRteType.setDescription('This object specifies whether this entry applies to receiving routes, advertising routes, or both.')
a3ipxPolRteNet1 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRteNet1.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRteNet1.setDescription('The IPX Network Number for which route information is accepted or rejected for this port. The value 0xfffffffe is used to represent the default route.')
a3ipxPolRteNet2 = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 4), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRteNet2.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRteNet2.setDescription('When the value of this object is a valid IPX network and different from a3ipxPolRteNet1, then this table entries specifies a range of IPX networks, with the value of a3ipxPolRteNet1 identifying the lower end of the range. If the value of this object is the same as a3ipxPolRteNet1, then this table entry specifies a single IPX network identified by the value of a3ipxPolRteNet1.')
a3ipxPolRteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRteStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRteStatus.setDescription('This object is used to add and delete entries in this table. See the notes describing RowStatus at the beginning of this MIB.')
a3ipxPolSvcTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 3), )
if mibBuilder.loadTexts: a3ipxPolSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcTable.setDescription("The IPX Policy Services Table controls the acceptance of service reachability information from neighbors and the advertisement of that information to neighbors. If a3ipxPCSvcRcvType is configured as normal, a service is accepted if its port number, server name, and service type is in the list of tuples specified as 'receivable' by this table. If a3ipxPCSvcRcvType is configured as inverse, a service is not accepted if its port number, server name, and service type is in the list of tuples specified as 'receivable' by this table. If a3ipxPCSvcAdvType is configured as normal, a service is advertised if its network port, server name, and service type is in the list of tuples specified as 'advertisable' by this table. If a3ipxPCSvcAdvType is configured as inverse, a service is not advertised if its port number, server name, and service type is in the list of tuples specified as 'advertisable' by this table.")
a3ipxPolSvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSvcPort"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSvcSvrName"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSvcType"))
if mibBuilder.loadTexts: a3ipxPolSvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcEntry.setDescription('A single entry in the Receive Services Policy table.')
a3ipxPolSvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSvcPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcPort.setDescription('The IPX port to which this Receive Svc Pol entry applies.')
a3ipxPolSvcEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSvcEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcEntryType.setDescription('This object specifies whether this entry applies to receiving services, advertising services, or both.')
a3ipxPolSvcSvrName = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSvcSvrName.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcSvrName.setDescription('This object contains the name of a server. A single wildcard (*) is allowed at the end of the name.')
a3ipxPolSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSvcType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcType.setDescription("The type of service for which information is accepted or rejected by this port. The value 'FFFF' acts as a wildcard for all service types.")
a3ipxPolSvcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 3, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSvcStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSvcStatus.setDescription('This object is used to add and delete entries in this table. See the notes describing RowStatus at the beginning of this MIB.')
a3ipxPolNbrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 4), )
if mibBuilder.loadTexts: a3ipxPolNbrTable.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrTable.setDescription('This table defines a set of neighbors to which the route and service reachability information is advertised. This table also defines a set of neighbors from which route and service reachability information is accepted. NOTE: this table is not supported by NETBuilders running sw version 8.0 and greater. The functionality provided by this table has been replaced by a3ipxPolRipNbrTable and a3ipxPolSapNbrTable.')
a3ipxPolNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolNbrPort"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolNbrNet"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolNbrAddress"))
if mibBuilder.loadTexts: a3ipxPolNbrEntry.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrEntry.setDescription('A single entry in the Policy Neighbor Table')
a3ipxPolNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolNbrPort.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrPort.setDescription('The IPX port over which the Trusted Neighbor identified by this table entry can be reached.')
a3ipxPolNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolNbrType.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrType.setDescription('This object specifies whether this entry applies to receiving information, advertising information, or both.')
a3ipxPolNbrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolNbrNet.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrNet.setDescription('The IPX Network number identifying the network to which the neighbor identified by this table entry is attached.')
a3ipxPolNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolNbrAddress.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrAddress.setDescription('The Mac Address of the Neighbor to whom route and service reachability information is to be advertised and from which route and service reachability information is accepted.')
a3ipxPolNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolNbrStatus.setStatus('deprecated')
if mibBuilder.loadTexts: a3ipxPolNbrStatus.setDescription('This object is used to add and delete entries in this table. See the notes describing RowStatus at the beginning of this MIB.')
a3ipxPolRipNbrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1), )
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlTable.setDescription('This table enables or disables the use of the entries in a3ipxPolRipNbrTable. If the use of the entries in that table is enabled, this table also controls how they are interpreted. In one case, RIP updates are accepted only from those IPX Neighbors listed in a3ipxPolRipNbrTable. In the other case, RIP updates are accepted only from those IPX Neighbors not listed in a3ipxPolRipNbrTable.')
a3ipxPolRipNbrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRipNbrCtlPort"))
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlEntry.setDescription('Each entry in this table applies to a separate NETBuilder port and controls those entries in a3ipxPolRipNbrTable that correspond to the same port.')
a3ipxPolRipNbrCtlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlPort.setDescription('This NETBuilder port to which this RIP Neighbor Control entry applies.')
a3ipxPolRipNbrCtlAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlAdvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlAdvCtl.setDescription('This object enables or disables the use of the entries in the RIP Neighbor Policy Table (a3ipxPolRipNbrTable) that apply to neighbors to which routing information is advertised. In other words, this object enables or disables the use of those entries in the Neighbor Policy Table for which a3ipxPolRipNbrType = advertise(2) or both(3).')
a3ipxPolRipNbrCtlRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlRcvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlRcvCtl.setDescription('The object enables or disables the use of the entries in the Neighbor Policy Table that apply to neighbors from which routing information is allowed to be received. In other words, this object enables or disables the use of those entries in the Neighbor Policy Table for which a3ipxPolRipNbrType = receive(2) or both(3).')
a3ipxPolRipNbrCtlRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlRcvType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrCtlRcvType.setDescription('If this object is set to normal(1), then route information is accepted only from those neighbors listed in the Neighbor Policy Table for which a3ipxPolRipNbrType = receive(2) or both(3). If this object is set to inverse(2), then route information is accepted from any neighbor except those neighbors listed in the Neighbor Policy Table for which a3ipxPolRipNbrType = receive(2) or both(3).')
a3ipxPolRipNbrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2), )
if mibBuilder.loadTexts: a3ipxPolRipNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrTable.setDescription('This table defines a set of neighbors to which the route information is advertised. This table also defines a set of neighbors from which route information is accepted.')
a3ipxPolRipNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRipNbrPort"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRipNbrNet"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolRipNbrAddress"))
if mibBuilder.loadTexts: a3ipxPolRipNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrEntry.setDescription('A single entry in the Policy Neighbor Table')
a3ipxPolRipNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrPort.setDescription('The IPX port over which the Trusted Neighbor identified by this table entry can be reached.')
a3ipxPolRipNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrType.setDescription('This object specifies whether this entry applies to receiving information, advertising information, or both.')
a3ipxPolRipNbrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrNet.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrNet.setDescription('The IPX Network number identifying the network to which the neighbor identified by this table entry is attached.')
a3ipxPolRipNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolRipNbrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrAddress.setDescription('The Mac Address of the Neighbor to whom route information is to be advertised and from which route information is accepted.')
a3ipxPolRipNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolRipNbrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolRipNbrStatus.setDescription('This object is used to add and delete entries in this table. See the notes describing RowStatus at the beginning of this MIB.')
a3ipxPolSapNbrCtlTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3), )
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlTable.setDescription('This table enables or disables the use of the entries in a3ipxPolSapNbrTable. If the use of the entries in that table is enabled, this table also controls how they are interpreted. In one case, SAP updates are accepted only from those IPX Neighbors listed in a3ipxPolSapNbrTable. In the case, SAP updates are accepted only from those IPX Neighbors not listed in a3ipxPolSapNbrTable.')
a3ipxPolSapNbrCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSapNbrCtlPort"))
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlEntry.setDescription('Each entry in this table applies to a separate NETBuilder port and controls those entries in a3ipxPolSapNbrTable that correspond to the same port.')
a3ipxPolSapNbrCtlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlPort.setDescription('This NETBuilder port to which this SAP Neighbor Control entry applies.')
a3ipxPolSapNbrCtlAdvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlAdvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlAdvCtl.setDescription('This object enables or disables the use of the entries in the SAP Neighbor Policy Table (a3ipxPolSapNbrTable) that apply to neighbors to which service reachability information is advertised. In other words, this object enables or disables the use of those entries in the Neighbor Policy Table for which a3ipxPolSapNbrType = advertise(2) or both(3).')
a3ipxPolSapNbrCtlRcvCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlRcvCtl.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlRcvCtl.setDescription('The object enables or disables the use of the entries in the Neighbor Policy Table that apply to neighbors from which service reachability information is allowed to be received. In other words, this object enables or disables the use of those entries in the Neighbor Policy Table for which a3ipxPolSapNbrType = receive(2) or both(3).')
a3ipxPolSapNbrCtlRcvType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("inverse", 2))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlRcvType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrCtlRcvType.setDescription('If this object is set to normal(1), then service reachability information is accepted only from those neighbors listed in the Neighbor Policy Table for which a3ipxPolSapNbrType = receive(2) or both(3). If this object is set to inverse(2), then service reachability information is accepted from any neighbor except those neighbors listed in the Neighbor Policy Table for which a3ipxPolSapNbrType = receive(2) or both(3).')
a3ipxPolSapNbrTable = MibTable((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4), )
if mibBuilder.loadTexts: a3ipxPolSapNbrTable.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrTable.setDescription('This table defines a set of neighbors to which the service reachability information is advertised. This table also defines a set of neighbors from which service reachability information is accepted.')
a3ipxPolSapNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1), ).setIndexNames((0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSapNbrPort"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSapNbrNet"), (0, "A3COM-IPXPOLICY-R3-MIB", "a3ipxPolSapNbrAddress"))
if mibBuilder.loadTexts: a3ipxPolSapNbrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrEntry.setDescription('A single entry in the Policy Neighbor Table')
a3ipxPolSapNbrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrPort.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrPort.setDescription('The IPX port over which the Trusted Neighbor identified by this table entry can be reached.')
a3ipxPolSapNbrType = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("advertise", 1), ("receive", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrType.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrType.setDescription('This object specifies whether this entry applies to receiving information, advertising information, or both.')
a3ipxPolSapNbrNet = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 3), IPXNET()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrNet.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrNet.setDescription('The IPX Network number identifying the network to which the neighbor identified by this table entry is attached.')
a3ipxPolSapNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: a3ipxPolSapNbrAddress.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrAddress.setDescription('The Mac Address of the Neighbor to whom service reachability information is to be advertised and from which service reachability information is accepted.')
a3ipxPolSapNbrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 43, 2, 11, 5, 4, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: a3ipxPolSapNbrStatus.setStatus('mandatory')
if mibBuilder.loadTexts: a3ipxPolSapNbrStatus.setDescription('This object is used to add and delete entries in this table. See the notes describing RowStatus at the beginning of this MIB.')
mibBuilder.exportSymbols("A3COM-IPXPOLICY-R3-MIB", RowStatus=RowStatus, a3ipxPCSvrRplyCtl=a3ipxPCSvrRplyCtl, a3ipxPolSapNbrEntry=a3ipxPolSapNbrEntry, a3ipxPolRipNbrTable=a3ipxPolRipNbrTable, a3ipxPCSvcAdvType=a3ipxPCSvcAdvType, a3ipxPCRteAdvCtl=a3ipxPCRteAdvCtl, a3ipxPolNbrType=a3ipxPolNbrType, a3ipxPolRipNbrCtlAdvCtl=a3ipxPolRipNbrCtlAdvCtl, a3ipxPolSvcType=a3ipxPolSvcType, a3ipxPolSapNbrTable=a3ipxPolSapNbrTable, a3ipxPCSvcRcvType=a3ipxPCSvcRcvType, a3ipxPolSapNbrCtlTable=a3ipxPolSapNbrCtlTable, a3ipxPolNbrEntry=a3ipxPolNbrEntry, a3ipxPolRipNbrEntry=a3ipxPolRipNbrEntry, a3ipxPCRteRcvType=a3ipxPCRteRcvType, a3ipxPolControlEntry=a3ipxPolControlEntry, a3ipxPolRipNbrCtlRcvCtl=a3ipxPolRipNbrCtlRcvCtl, a3ipxPCNbrAdvCtl=a3ipxPCNbrAdvCtl, a3ipxPolSapNbrCtlAdvCtl=a3ipxPolSapNbrCtlAdvCtl, a3ipxPolSapNbrStatus=a3ipxPolSapNbrStatus, a3ipxPCRipPolOverride=a3ipxPCRipPolOverride, a3ipxPCSvcAdvCtl=a3ipxPCSvcAdvCtl, a3ipxPolRteNet2=a3ipxPolRteNet2, a3ipxPolRipNbrCtlRcvType=a3ipxPolRipNbrCtlRcvType, a3ipxPCSapPolOverride=a3ipxPCSapPolOverride, a3ipxPolRipNbrCtlPort=a3ipxPolRipNbrCtlPort, a3ipxPolSvcStatus=a3ipxPolSvcStatus, a3ipxPolSapNbrCtlRcvCtl=a3ipxPolSapNbrCtlRcvCtl, a3ipxPolRipNbrStatus=a3ipxPolRipNbrStatus, a3ipxPolSapNbrNet=a3ipxPolSapNbrNet, a3ipxPolRipNbrCtlEntry=a3ipxPolRipNbrCtlEntry, a3ipxPolNbrPort=a3ipxPolNbrPort, a3ipxPolNbrNet=a3ipxPolNbrNet, a3ipxPolNbrStatus=a3ipxPolNbrStatus, IPXNET=IPXNET, a3ipxPolRteEntry=a3ipxPolRteEntry, a3ipxPolSvcTable=a3ipxPolSvcTable, a3ipxPolRipNbrAddress=a3ipxPolRipNbrAddress, a3ipxPolRteStatus=a3ipxPolRteStatus, a3ipxPolRipNbrCtlTable=a3ipxPolRipNbrCtlTable, a3ipxPolSapNbrCtlRcvType=a3ipxPolSapNbrCtlRcvType, a3ipxPolSapNbrCtlPort=a3ipxPolSapNbrCtlPort, a3ipxPCSvcRcvCtl=a3ipxPCSvcRcvCtl, a3ipxPCRteRcvCtl=a3ipxPCRteRcvCtl, brouterMIB=brouterMIB, a3ipxPCPolicyOverride=a3ipxPCPolicyOverride, a3ipxPCNbrRcvType=a3ipxPCNbrRcvType, a3ipxPolRtePort=a3ipxPolRtePort, a3ipxPolNbrAddress=a3ipxPolNbrAddress, a3ipxPolRipNbrType=a3ipxPolRipNbrType, a3ipxPolSapNbrType=a3ipxPolSapNbrType, a3ipxPolRteTable=a3ipxPolRteTable, a3ipxPolSvcSvrName=a3ipxPolSvcSvrName, a3ipxPolRipNbrPort=a3ipxPolRipNbrPort, a3ipxPolNbr=a3ipxPolNbr, a3ipxPolSvcEntryType=a3ipxPolSvcEntryType, a3ipxPolSapNbrCtlEntry=a3ipxPolSapNbrCtlEntry, a3ipxPolRteNet1=a3ipxPolRteNet1, a3ipxPolSvcEntry=a3ipxPolSvcEntry, a3ipxPolSapNbrPort=a3ipxPolSapNbrPort, a3ipxPCNbrRcvCtl=a3ipxPCNbrRcvCtl, a3ipxPolSapNbrAddress=a3ipxPolSapNbrAddress, a3Com=a3Com, a3ipxPolSvcPort=a3ipxPolSvcPort, a3ipxPolNbrTable=a3ipxPolNbrTable, a3ipxPolControlTable=a3ipxPolControlTable, a3ipxPolRteType=a3ipxPolRteType, a3ipxPCPort=a3ipxPCPort, a3ipxPCRteAdvType=a3ipxPCRteAdvType, a3ipxPolRipNbrNet=a3ipxPolRipNbrNet, a3ComIPXpol=a3ComIPXpol)
